
Five_button_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000786c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a90  08007a90  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a98  08007a98  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08007aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d7c  20000158  08007bf8  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ed4  08007bf8  00021ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000def6  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de2  00000000  00000000  0002e0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00030ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090f  00000000  00000000  00031b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018cec  00000000  00000000  0003240f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001074e  00000000  00000000  0004b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088a25  00000000  00000000  0005b849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003690  00000000  00000000  000e4270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e7900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000158 	.word	0x20000158
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080079ec 	.word	0x080079ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000015c 	.word	0x2000015c
 80001d4:	080079ec 	.word	0x080079ec

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <MX_GPIO_Init+0xd0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <MX_GPIO_Init+0xd0>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <MX_GPIO_Init+0xd0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_GPIO_Init+0xd0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a25      	ldr	r2, [pc, #148]	; (80005a4 <MX_GPIO_Init+0xd0>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_GPIO_Init+0xd0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000522:	237f      	movs	r3, #127	; 0x7f
 8000524:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000526:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4619      	mov	r1, r3
 8000536:	481c      	ldr	r0, [pc, #112]	; (80005a8 <MX_GPIO_Init+0xd4>)
 8000538:	f000 fc3c 	bl	8000db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	2006      	movs	r0, #6
 8000542:	f000 fc00 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000546:	2006      	movs	r0, #6
 8000548:	f000 fc19 	bl	8000d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2007      	movs	r0, #7
 8000552:	f000 fbf8 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000556:	2007      	movs	r0, #7
 8000558:	f000 fc11 	bl	8000d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2008      	movs	r0, #8
 8000562:	f000 fbf0 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000566:	2008      	movs	r0, #8
 8000568:	f000 fc09 	bl	8000d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	2009      	movs	r0, #9
 8000572:	f000 fbe8 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000576:	2009      	movs	r0, #9
 8000578:	f000 fc01 	bl	8000d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	200a      	movs	r0, #10
 8000582:	f000 fbe0 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fbf9 	bl	8000d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2100      	movs	r1, #0
 8000590:	2017      	movs	r0, #23
 8000592:	f000 fbd8 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000596:	2017      	movs	r0, #23
 8000598:	f000 fbf1 	bl	8000d7e <HAL_NVIC_EnableIRQ>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000

080005ac <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *p, int len)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t *)p, len);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	68b8      	ldr	r0, [r7, #8]
 80005c0:	f006 f916 	bl	80067f0 <CDC_Transmit_FS>
    return len;
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	2b20      	cmp	r3, #32
 80005de:	dc47      	bgt.n	8000670 <HAL_GPIO_EXTI_Callback+0xa0>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	dd64      	ble.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
 80005e4:	3b01      	subs	r3, #1
 80005e6:	2b1f      	cmp	r3, #31
 80005e8:	d861      	bhi.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <HAL_GPIO_EXTI_Callback+0x20>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	08000677 	.word	0x08000677
 80005f4:	0800067f 	.word	0x0800067f
 80005f8:	080006af 	.word	0x080006af
 80005fc:	08000687 	.word	0x08000687
 8000600:	080006af 	.word	0x080006af
 8000604:	080006af 	.word	0x080006af
 8000608:	080006af 	.word	0x080006af
 800060c:	0800068f 	.word	0x0800068f
 8000610:	080006af 	.word	0x080006af
 8000614:	080006af 	.word	0x080006af
 8000618:	080006af 	.word	0x080006af
 800061c:	080006af 	.word	0x080006af
 8000620:	080006af 	.word	0x080006af
 8000624:	080006af 	.word	0x080006af
 8000628:	080006af 	.word	0x080006af
 800062c:	08000697 	.word	0x08000697
 8000630:	080006af 	.word	0x080006af
 8000634:	080006af 	.word	0x080006af
 8000638:	080006af 	.word	0x080006af
 800063c:	080006af 	.word	0x080006af
 8000640:	080006af 	.word	0x080006af
 8000644:	080006af 	.word	0x080006af
 8000648:	080006af 	.word	0x080006af
 800064c:	080006af 	.word	0x080006af
 8000650:	080006af 	.word	0x080006af
 8000654:	080006af 	.word	0x080006af
 8000658:	080006af 	.word	0x080006af
 800065c:	080006af 	.word	0x080006af
 8000660:	080006af 	.word	0x080006af
 8000664:	080006af 	.word	0x080006af
 8000668:	080006af 	.word	0x080006af
 800066c:	0800069f 	.word	0x0800069f
 8000670:	2b40      	cmp	r3, #64	; 0x40
 8000672:	d018      	beq.n	80006a6 <HAL_GPIO_EXTI_Callback+0xd6>
            break;
        case GPIO_PIN_6:
            printf("RESET\r\n");
            break;
    }
}
 8000674:	e01b      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
            printf("UP\r\n");
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000678:	f006 fe22 	bl	80072c0 <puts>
            break;
 800067c:	e017      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
            printf("DOWN\r\n");
 800067e:	480f      	ldr	r0, [pc, #60]	; (80006bc <HAL_GPIO_EXTI_Callback+0xec>)
 8000680:	f006 fe1e 	bl	80072c0 <puts>
            break;
 8000684:	e013      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
            printf("LEFT\r\n");
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000688:	f006 fe1a 	bl	80072c0 <puts>
            break;
 800068c:	e00f      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
            printf("RIGHT\r\n");
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000690:	f006 fe16 	bl	80072c0 <puts>
            break;
 8000694:	e00b      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
            printf("MID\r\n");
 8000696:	480c      	ldr	r0, [pc, #48]	; (80006c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000698:	f006 fe12 	bl	80072c0 <puts>
            break;
 800069c:	e007      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
            printf("SET\r\n");
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <HAL_GPIO_EXTI_Callback+0xfc>)
 80006a0:	f006 fe0e 	bl	80072c0 <puts>
            break;
 80006a4:	e003      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xde>
            printf("RESET\r\n");
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x100>)
 80006a8:	f006 fe0a 	bl	80072c0 <puts>
            break;
 80006ac:	bf00      	nop
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08007a04 	.word	0x08007a04
 80006bc:	08007a08 	.word	0x08007a08
 80006c0:	08007a10 	.word	0x08007a10
 80006c4:	08007a18 	.word	0x08007a18
 80006c8:	08007a20 	.word	0x08007a20
 80006cc:	08007a28 	.word	0x08007a28
 80006d0:	08007a30 	.word	0x08007a30

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 f9c4 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f806 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f7ff fef8 	bl	80004d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006e4:	f005 ffc6 	bl	8006674 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x14>
	...

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fec0 	bl	8007480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <SystemClock_Config+0xc8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <SystemClock_Config+0xc8>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <SystemClock_Config+0xc8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <SystemClock_Config+0xcc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <SystemClock_Config+0xcc>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <SystemClock_Config+0xcc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800075c:	230f      	movs	r3, #15
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000764:	2304      	movs	r3, #4
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000768:	2305      	movs	r3, #5
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ff39 	bl	80025e8 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 f81e 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f002 f99b 	bl	8002ad8 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a8:	f000 f808 	bl	80007bc <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	; 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f950 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000870:	2001      	movs	r0, #1
 8000872:	f000 fc23 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800087e:	2002      	movs	r0, #2
 8000880:	f000 fc1c 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800088c:	2004      	movs	r0, #4
 800088e:	f000 fc15 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800089a:	2008      	movs	r0, #8
 800089c:	f000 fc0e 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80008a8:	2010      	movs	r0, #16
 80008aa:	f000 fc07 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80008b6:	2020      	movs	r0, #32
 80008b8:	f000 fc00 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80008bc:	2040      	movs	r0, #64	; 0x40
 80008be:	f000 fbfd 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <OTG_FS_IRQHandler+0x10>)
 80008ce:	f000 fd5d 	bl	800138c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000165c 	.word	0x2000165c

080008dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e00a      	b.n	8000904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ee:	f3af 8000 	nop.w
 80008f2:	4601      	mov	r1, r0
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	60ba      	str	r2, [r7, #8]
 80008fa:	b2ca      	uxtb	r2, r1
 80008fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf0      	blt.n	80008ee <_read+0x12>
  }

  return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093e:	605a      	str	r2, [r3, #4]
  return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_isatty>:

int _isatty(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f006 fdb4 	bl	800751c <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20020000 	.word	0x20020000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	20000174 	.word	0x20000174
 80009e8:	20001ed8 	.word	0x20001ed8

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3a:	f7ff ffd7 	bl	80009ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f006 fd73 	bl	8007528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fe47 	bl	80006d4 <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000a54:	08007aa0 	.word	0x08007aa0
  ldr r2, =_sbss
 8000a58:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000a5c:	20001ed4 	.word	0x20001ed4

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_Init+0x40>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_Init+0x40>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x40>)
 8000a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f94f 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fe96 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f967 	bl	8000d9a <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f92f 	bl	8000d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000178 	.word	0x20000178

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000178 	.word	0x20000178

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff29 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff3e 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff31 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffa2 	bl	8000cec <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e159      	b.n	8001084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8148 	bne.w	800107e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d005      	beq.n	8000e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d017      	beq.n	8000ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d123      	bne.n	8000ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	69b9      	ldr	r1, [r7, #24]
 8000ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80a2 	beq.w	800107e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b57      	ldr	r3, [pc, #348]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a56      	ldr	r2, [pc, #344]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b54      	ldr	r3, [pc, #336]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f56:	4a52      	ldr	r2, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a49      	ldr	r2, [pc, #292]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x202>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_GPIO_Init+0x2f4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fe>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a47      	ldr	r2, [pc, #284]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1fa>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <HAL_GPIO_Init+0x2fc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1f6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a45      	ldr	r2, [pc, #276]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1f2>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_GPIO_Init+0x304>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_GPIO_Init+0x304>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_GPIO_Init+0x304>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f aea2 	bls.w	8000dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40013c00 	.word	0x40013c00

080010bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa78 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40013c00 	.word	0x40013c00

080010ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b08f      	sub	sp, #60	; 0x3c
 80010f0:	af0a      	add	r7, sp, #40	; 0x28
 80010f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e10f      	b.n	800131e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d106      	bne.n	800111e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f005 fcb1 	bl	8006a80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 ff98 	bl	8003072 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	687e      	ldr	r6, [r7, #4]
 800114a:	466d      	mov	r5, sp
 800114c:	f106 0410 	add.w	r4, r6, #16
 8001150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001158:	e894 0003 	ldmia.w	r4, {r0, r1}
 800115c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001160:	1d33      	adds	r3, r6, #4
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f001 fe6f 	bl	8002e48 <USB_CoreInit>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0d0      	b.n	800131e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f001 ff86 	bl	8003094 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e04a      	b.n	8001224 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	333d      	adds	r3, #61	; 0x3d
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	333c      	adds	r3, #60	; 0x3c
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	b298      	uxth	r0, r3
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	3344      	adds	r3, #68	; 0x44
 80011ca:	4602      	mov	r2, r0
 80011cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	3340      	adds	r3, #64	; 0x40
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	3348      	adds	r3, #72	; 0x48
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	334c      	adds	r3, #76	; 0x4c
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3354      	adds	r3, #84	; 0x54
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	3301      	adds	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3af      	bcc.n	800118e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e044      	b.n	80012be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3301      	adds	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3b5      	bcc.n	8001234 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	687e      	ldr	r6, [r7, #4]
 80012d0:	466d      	mov	r5, sp
 80012d2:	f106 0410 	add.w	r4, r6, #16
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80012e6:	1d33      	adds	r3, r6, #4
 80012e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f001 ff1e 	bl	800312c <USB_DevInit>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2202      	movs	r2, #2
 80012fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00d      	b.n	800131e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f86d 	bl	80043f6 <USB_DevDisconnect>

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001326 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_PCD_Start+0x1c>
 800133e:	2302      	movs	r3, #2
 8001340:	e020      	b.n	8001384 <HAL_PCD_Start+0x5e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	2b01      	cmp	r3, #1
 8001350:	d109      	bne.n	8001366 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001356:	2b01      	cmp	r3, #1
 8001358:	d005      	beq.n	8001366 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fe70 	bl	8003050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f81d 	bl	80043b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b08d      	sub	sp, #52	; 0x34
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f8db 	bl	800455e <USB_GetMode>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 848a 	bne.w	8001cc4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 f83f 	bl	8004438 <USB_ReadInterrupts>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8480 	beq.w	8001cc2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	0a1b      	lsrs	r3, r3, #8
 80013cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 f82c 	bl	8004438 <USB_ReadInterrupts>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d107      	bne.n	80013fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f002 0202 	and.w	r2, r2, #2
 80013f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 f81a 	bl	8004438 <USB_ReadInterrupts>
 8001404:	4603      	mov	r3, r0
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b10      	cmp	r3, #16
 800140c:	d161      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0210 	bic.w	r2, r2, #16
 800141c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f003 020f 	and.w	r2, r3, #15
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	3304      	adds	r3, #4
 800143c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	0c5b      	lsrs	r3, r3, #17
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	2b02      	cmp	r3, #2
 8001448:	d124      	bne.n	8001494 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d035      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	6a38      	ldr	r0, [r7, #32]
 800146a:	f002 fe51 	bl	8004110 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800147a:	441a      	add	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148c:	441a      	add	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	621a      	str	r2, [r3, #32]
 8001492:	e016      	b.n	80014c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	0c5b      	lsrs	r3, r3, #17
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	2b06      	cmp	r3, #6
 800149e:	d110      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014a6:	2208      	movs	r2, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	6a38      	ldr	r0, [r7, #32]
 80014ac:	f002 fe30 	bl	8004110 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014bc:	441a      	add	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0210 	orr.w	r2, r2, #16
 80014d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 ffae 	bl	8004438 <USB_ReadInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014e6:	f040 80a7 	bne.w	8001638 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 ffb3 	bl	800445e <USB_ReadDevAllOutEpInterrupt>
 80014f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014fa:	e099      	b.n	8001630 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 808e 	beq.w	8001624 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f002 ffd7 	bl	80044c6 <USB_ReadDevOutEPInterrupt>
 8001518:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001530:	461a      	mov	r2, r3
 8001532:	2301      	movs	r3, #1
 8001534:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fec3 	bl	80022c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00c      	beq.n	8001562 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001554:	461a      	mov	r2, r3
 8001556:	2308      	movs	r3, #8
 8001558:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800155a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 ff99 	bl	8002494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001578:	461a      	mov	r2, r3
 800157a:	2310      	movs	r3, #16
 800157c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d030      	beq.n	80015ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001590:	2b80      	cmp	r3, #128	; 0x80
 8001592:	d109      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	3304      	adds	r3, #4
 80015bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	78db      	ldrb	r3, [r3, #3]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d108      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2200      	movs	r2, #0
 80015ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f005 fb50 	bl	8006c78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e4:	461a      	mov	r2, r3
 80015e6:	2302      	movs	r3, #2
 80015e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001600:	461a      	mov	r2, r3
 8001602:	2320      	movs	r3, #32
 8001604:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d009      	beq.n	8001624 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4413      	add	r3, r2
 8001618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161c:	461a      	mov	r2, r3
 800161e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001622:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	3301      	adds	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	f47f af62 	bne.w	80014fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fefb 	bl	8004438 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800164c:	f040 80db 	bne.w	8001806 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 ff1c 	bl	8004492 <USB_ReadDevAllInEpInterrupt>
 800165a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001660:	e0cd      	b.n	80017fe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80c2 	beq.w	80017f2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f002 ff42 	bl	8004502 <USB_ReadDevInEPInterrupt>
 800167e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d057      	beq.n	800173a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	2201      	movs	r2, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69f9      	ldr	r1, [r7, #28]
 80016a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016aa:	4013      	ands	r3, r2
 80016ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ba:	461a      	mov	r2, r3
 80016bc:	2301      	movs	r3, #1
 80016be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d132      	bne.n	800172e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	334c      	adds	r3, #76	; 0x4c
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4403      	add	r3, r0
 80016e8:	3348      	adds	r3, #72	; 0x48
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4419      	add	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4403      	add	r3, r0
 80016fc:	334c      	adds	r3, #76	; 0x4c
 80016fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	2b00      	cmp	r3, #0
 8001704:	d113      	bne.n	800172e <HAL_PCD_IRQHandler+0x3a2>
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3354      	adds	r3, #84	; 0x54
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d108      	bne.n	800172e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001726:	461a      	mov	r2, r3
 8001728:	2101      	movs	r1, #1
 800172a:	f002 ff49 	bl	80045c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f005 fa24 	bl	8006b82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	015a      	lsls	r2, r3, #5
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	4413      	add	r3, r2
 800174c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001750:	461a      	mov	r2, r3
 8001752:	2308      	movs	r3, #8
 8001754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	015a      	lsls	r2, r3, #5
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800176c:	461a      	mov	r2, r3
 800176e:	2310      	movs	r3, #16
 8001770:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001788:	461a      	mov	r2, r3
 800178a:	2340      	movs	r3, #64	; 0x40
 800178c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179a:	6a38      	ldr	r0, [r7, #32]
 800179c:	f001 fe2a 	bl	80033f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a2:	4613      	mov	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	3338      	adds	r3, #56	; 0x38
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	3304      	adds	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	78db      	ldrb	r3, [r3, #3]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d108      	bne.n	80017ce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2200      	movs	r2, #0
 80017c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f005 fa67 	bl	8006c9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017da:	461a      	mov	r2, r3
 80017dc:	2302      	movs	r3, #2
 80017de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fcdb 	bl	80021a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	3301      	adds	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	f47f af2e 	bne.w	8001662 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fe14 	bl	8004438 <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800181a:	d122      	bne.n	8001862 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001842:	2100      	movs	r1, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fec3 	bl	80025d0 <HAL_PCDEx_LPM_Callback>
 800184a:	e002      	b.n	8001852 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f005 fa05 	bl	8006c5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fde6 	bl	8004438 <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001876:	d112      	bne.n	800189e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d102      	bne.n	800188e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f005 f9c1 	bl	8006c10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800189c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fdc8 	bl	8004438 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b2:	f040 80b7 	bne.w	8001a24 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2110      	movs	r1, #16
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 fd8f 	bl	80033f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018da:	e046      	b.n	800196a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	015a      	lsls	r2, r3, #5
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e8:	461a      	mov	r2, r3
 80018ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001900:	0151      	lsls	r1, r2, #5
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	440a      	add	r2, r1
 8001906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800190a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800190e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800191c:	461a      	mov	r2, r3
 800191e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001922:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001934:	0151      	lsls	r1, r2, #5
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	440a      	add	r2, r1
 800193a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800193e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001942:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001954:	0151      	lsls	r1, r2, #5
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	440a      	add	r2, r1
 800195a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800195e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001962:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	3301      	adds	r3, #1
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d3b3      	bcc.n	80018dc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001982:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001986:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	2b00      	cmp	r3, #0
 800198e:	d016      	beq.n	80019be <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a0:	f043 030b 	orr.w	r3, r3, #11
 80019a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b6:	f043 030b 	orr.w	r3, r3, #11
 80019ba:	6453      	str	r3, [r2, #68]	; 0x44
 80019bc:	e015      	b.n	80019ea <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019d0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e4:	f043 030b 	orr.w	r3, r3, #11
 80019e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f002 fdd6 	bl	80045c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fd05 	bl	8004438 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a38:	d124      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fd9b 	bl	800457a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fd50 	bl	80034ee <USB_GetDevSpeed>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681c      	ldr	r4, [r3, #0]
 8001a5a:	f001 f9e9 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8001a5e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f001 fa4f 	bl	8002f0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f005 f8af 	bl	8006bd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fcd5 	bl	8004438 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d10a      	bne.n	8001aae <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f005 f88c 	bl	8006bb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f002 0208 	and.w	r2, r2, #8
 8001aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fcc0 	bl	8004438 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	2b80      	cmp	r3, #128	; 0x80
 8001ac0:	d122      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ace:	2301      	movs	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	e014      	b.n	8001afe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fb27 	bl	8002146 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3e5      	bcc.n	8001ad4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fc93 	bl	8004438 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b1c:	d13b      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b1e:	2301      	movs	r3, #1
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e02b      	b.n	8001b7c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	015a      	lsls	r2, r3, #5
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3340      	adds	r3, #64	; 0x40
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d115      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da12      	bge.n	8001b76 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333f      	adds	r3, #63	; 0x3f
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fae8 	bl	8002146 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3ce      	bcc.n	8001b24 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 fc4c 	bl	8004438 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001baa:	d155      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bac:	2301      	movs	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb0:	e045      	b.n	8001c3e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d12e      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	da2b      	bge.n	8001c38 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d121      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10a      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c34:	6053      	str	r3, [r2, #4]
            break;
 8001c36:	e007      	b.n	8001c48 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3b4      	bcc.n	8001bb2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fbeb 	bl	8004438 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6c:	d10a      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f005 f826 	bl	8006cc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fbd5 	bl	8004438 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d115      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f005 f816 	bl	8006cdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	e000      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x938>
      return;
 8001cc2:	bf00      	nop
    }
  }
}
 8001cc4:	3734      	adds	r7, #52	; 0x34
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}

08001cca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_PCD_SetAddress+0x1a>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e013      	b.n	8001d0c <HAL_PCD_SetAddress+0x42>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fb33 	bl	8004368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	70fb      	strb	r3, [r7, #3]
 8001d26:	460b      	mov	r3, r1
 8001d28:	803b      	strh	r3, [r7, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da0f      	bge.n	8001d5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3338      	adds	r3, #56	; 0x38
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	705a      	strb	r2, [r3, #1]
 8001d58:	e00f      	b.n	8001d7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d86:	883a      	ldrh	r2, [r7, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	78ba      	ldrb	r2, [r7, #2]
 8001d90:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d102      	bne.n	8001db0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_PCD_EP_Open+0xaa>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e00e      	b.n	8001ddc <HAL_PCD_EP_Open+0xc8>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fbb3 	bl	8003538 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dda:	7afb      	ldrb	r3, [r7, #11]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da0f      	bge.n	8001e18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 020f 	and.w	r2, r3, #15
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3338      	adds	r3, #56	; 0x38
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	705a      	strb	r2, [r3, #1]
 8001e16:	e00f      	b.n	8001e38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 020f 	and.w	r2, r3, #15
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_PCD_EP_Close+0x6e>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e00e      	b.n	8001e70 <HAL_PCD_EP_Close+0x8c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68f9      	ldr	r1, [r7, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fbf1 	bl	8003648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	460b      	mov	r3, r1
 8001e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6979      	ldr	r1, [r7, #20]
 8001eec:	f001 fed0 	bl	8003c90 <USB_EP0StartXfer>
 8001ef0:	e008      	b.n	8001f04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	6979      	ldr	r1, [r7, #20]
 8001f00:	f001 fc7e 	bl	8003800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f30:	681b      	ldr	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	3338      	adds	r3, #56	; 0x38
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	3304      	adds	r3, #4
 8001f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6979      	ldr	r1, [r7, #20]
 8001fb0:	f001 fe6e 	bl	8003c90 <USB_EP0StartXfer>
 8001fb4:	e008      	b.n	8001fc8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6979      	ldr	r1, [r7, #20]
 8001fc4:	f001 fc1c 	bl	8003800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d901      	bls.n	8001ff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e050      	b.n	8002092 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0f      	bge.n	8002018 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3338      	adds	r3, #56	; 0x38
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	705a      	strb	r2, [r3, #1]
 8002016:	e00d      	b.n	8002034 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	3304      	adds	r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	b2da      	uxtb	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_PCD_EP_SetStall+0x82>
 8002050:	2302      	movs	r3, #2
 8002052:	e01e      	b.n	8002092 <HAL_PCD_EP_SetStall+0xc0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	4618      	mov	r0, r3
 8002064:	f002 f8ac 	bl	80041c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10a      	bne.n	8002088 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	b2d9      	uxtb	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002082:	461a      	mov	r2, r3
 8002084:	f002 fa9c 	bl	80045c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d901      	bls.n	80020b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e042      	b.n	800213e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0f      	bge.n	80020e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 020f 	and.w	r2, r3, #15
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	705a      	strb	r2, [r3, #1]
 80020de:	e00f      	b.n	8002100 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 020f 	and.w	r2, r3, #15
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	3304      	adds	r3, #4
 80020f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	b2da      	uxtb	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_PCD_EP_ClrStall+0x86>
 800211c:	2302      	movs	r3, #2
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_ClrStall+0xa4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68f9      	ldr	r1, [r7, #12]
 800212e:	4618      	mov	r0, r3
 8002130:	f002 f8b4 	bl	800429c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da0c      	bge.n	8002174 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	3338      	adds	r3, #56	; 0x38
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	3304      	adds	r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	e00c      	b.n	800218e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f003 020f 	and.w	r2, r3, #15
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fed3 	bl	8003f40 <USB_EPStopXfer>
 800219a:	4603      	mov	r3, r0
 800219c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800219e:	7afb      	ldrb	r3, [r7, #11]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	3338      	adds	r3, #56	; 0x38
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	3304      	adds	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d901      	bls.n	80021e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e06c      	b.n	80022ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d902      	bls.n	80021fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	3303      	adds	r3, #3
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002204:	e02b      	b.n	800225e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	429a      	cmp	r2, r3
 800221a:	d902      	bls.n	8002222 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3303      	adds	r3, #3
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6919      	ldr	r1, [r3, #16]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800223a:	b2db      	uxtb	r3, r3
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4603      	mov	r3, r0
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f001 ff27 	bl	8004094 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	441a      	add	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	441a      	add	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	429a      	cmp	r2, r3
 8002272:	d809      	bhi.n	8002288 <PCD_WriteEmptyTxFifo+0xe0>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800227c:	429a      	cmp	r2, r3
 800227e:	d203      	bcs.n	8002288 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1be      	bne.n	8002206 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	429a      	cmp	r2, r3
 8002292:	d811      	bhi.n	80022b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	2201      	movs	r2, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	6939      	ldr	r1, [r7, #16]
 80022b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022b4:	4013      	ands	r3, r2
 80022b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	333c      	adds	r3, #60	; 0x3c
 80022dc:	3304      	adds	r3, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d17b      	bne.n	80023f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4a61      	ldr	r2, [pc, #388]	; (800248c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	f240 80b9 	bls.w	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80b3 	beq.w	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002326:	461a      	mov	r2, r3
 8002328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232c:	6093      	str	r3, [r2, #8]
 800232e:	e0a7      	b.n	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002346:	461a      	mov	r2, r3
 8002348:	2320      	movs	r3, #32
 800234a:	6093      	str	r3, [r2, #8]
 800234c:	e098      	b.n	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 8093 	bne.w	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	4a4b      	ldr	r2, [pc, #300]	; (800248c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d90f      	bls.n	8002382 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002378:	461a      	mov	r2, r3
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	e07e      	b.n	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	0159      	lsls	r1, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	440b      	add	r3, r1
 80023a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d114      	bne.n	80023e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023cc:	461a      	mov	r2, r3
 80023ce:	2101      	movs	r1, #1
 80023d0:	f002 f8f6 	bl	80045c0 <USB_EP0_OutStart>
 80023d4:	e006      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	441a      	add	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f004 fbae 	bl	8006b4c <HAL_PCD_DataOutStageCallback>
 80023f0:	e046      	b.n	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4a26      	ldr	r2, [pc, #152]	; (8002490 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d124      	bne.n	8002444 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4413      	add	r3, r2
 800240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002410:	461a      	mov	r2, r3
 8002412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002416:	6093      	str	r3, [r2, #8]
 8002418:	e032      	b.n	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002430:	461a      	mov	r2, r3
 8002432:	2320      	movs	r3, #32
 8002434:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f004 fb85 	bl	8006b4c <HAL_PCD_DataOutStageCallback>
 8002442:	e01d      	b.n	8002480 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d114      	bne.n	8002474 <PCD_EP_OutXfrComplete_int+0x1b0>
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800246c:	461a      	mov	r2, r3
 800246e:	2100      	movs	r1, #0
 8002470:	f002 f8a6 	bl	80045c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f004 fb66 	bl	8006b4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	4f54300a 	.word	0x4f54300a
 8002490:	4f54310a 	.word	0x4f54310a

08002494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	333c      	adds	r3, #60	; 0x3c
 80024ac:	3304      	adds	r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a15      	ldr	r2, [pc, #84]	; (800251c <PCD_EP_OutSetupPacket_int+0x88>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d90e      	bls.n	80024e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e0:	461a      	mov	r2, r3
 80024e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f004 fb1d 	bl	8006b28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <PCD_EP_OutSetupPacket_int+0x88>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d90c      	bls.n	8002510 <PCD_EP_OutSetupPacket_int+0x7c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002508:	461a      	mov	r2, r3
 800250a:	2101      	movs	r1, #1
 800250c:	f002 f858 	bl	80045c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	4f54300a 	.word	0x4f54300a

08002520 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
 800252c:	4613      	mov	r3, r2
 800252e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800253e:	883b      	ldrh	r3, [r7, #0]
 8002540:	0419      	lsls	r1, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	430a      	orrs	r2, r1
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
 800254c:	e028      	b.n	80025a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4413      	add	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e00d      	b.n	800257e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3301      	adds	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	3b01      	subs	r3, #1
 8002584:	429a      	cmp	r2, r3
 8002586:	d3ec      	bcc.n	8002562 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002588:	883b      	ldrh	r3, [r7, #0]
 800258a:	0418      	lsls	r0, r3, #16
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	3b01      	subs	r3, #1
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	4302      	orrs	r2, r0
 8002598:	3340      	adds	r3, #64	; 0x40
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e267      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002606:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d00c      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b85      	ldr	r3, [pc, #532]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261a:	2b08      	cmp	r3, #8
 800261c:	d112      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b7e      	ldr	r3, [pc, #504]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e242      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a75      	ldr	r2, [pc, #468]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b70      	ldr	r3, [pc, #448]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6f      	ldr	r2, [pc, #444]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b6d      	ldr	r3, [pc, #436]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6c      	ldr	r2, [pc, #432]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b69      	ldr	r3, [pc, #420]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a65      	ldr	r2, [pc, #404]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fa46 	bl	8000b30 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe fa42 	bl	8000b30 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e207      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fa32 	bl	8000b30 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fa2e 	bl	8000b30 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1f3      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fe:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002716:	4b44      	ldr	r3, [pc, #272]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1c7      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e03a      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002758:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_OscConfig+0x244>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe f9e7 	bl	8000b30 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002766:	f7fe f9e3 	bl	8000b30 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1a8      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4925      	ldr	r1, [pc, #148]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x244>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe f9c6 	bl	8000b30 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe f9c2 	bl	8000b30 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e187      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d036      	beq.n	8002840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <HAL_RCC_OscConfig+0x248>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe f9a6 	bl	8000b30 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe f9a2 	bl	8000b30 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e167      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_OscConfig+0x240>)
 80027fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
 8002806:	e01b      	b.n	8002840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_OscConfig+0x248>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fe f98f 	bl	8000b30 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	e00e      	b.n	8002834 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7fe f98b 	bl	8000b30 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d907      	bls.n	8002834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e150      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002828:	40023800 	.word	0x40023800
 800282c:	42470000 	.word	0x42470000
 8002830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ea      	bne.n	8002816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8097 	beq.w	800297c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b81      	ldr	r3, [pc, #516]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b7d      	ldr	r3, [pc, #500]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a7c      	ldr	r2, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b77      	ldr	r3, [pc, #476]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a73      	ldr	r2, [pc, #460]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fe f94b 	bl	8000b30 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe f947 	bl	8000b30 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e10c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x474>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2ea>
 80028c4:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a63      	ldr	r2, [pc, #396]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
 80028d0:	e01c      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x30c>
 80028da:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a5e      	ldr	r2, [pc, #376]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	4a5b      	ldr	r2, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6713      	str	r3, [r2, #112]	; 0x70
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0x324>
 80028f4:	4b58      	ldr	r3, [pc, #352]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a54      	ldr	r2, [pc, #336]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f90c 	bl	8000b30 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe f908 	bl	8000b30 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0cb      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ee      	beq.n	800291c <HAL_RCC_OscConfig+0x334>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7fe f8f6 	bl	8000b30 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe f8f2 	bl	8000b30 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0b5      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ee      	bne.n	8002948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a1 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	d05c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d141      	bne.n	8002a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe f8c6 	bl	8000b30 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe f8c2 	bl	8000b30 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e087      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	491b      	ldr	r1, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe f89b 	bl	8000b30 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe f897 	bl	8000b30 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e05c      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x416>
 8002a1c:	e054      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x478>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe f884 	bl	8000b30 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe f880 	bl	8000b30 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e045      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x470>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x444>
 8002a4a:	e03d      	b.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e038      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d028      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d121      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a94:	4013      	ands	r3, r2
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d111      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0cc      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d90c      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d044      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e067      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4934      	ldr	r1, [pc, #208]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7fd ffb2 	bl	8000b30 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fd ffae 	bl	8000b30 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e04f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d20c      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd ff12 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023c00 	.word	0x40023c00
 8002c94:	40023800 	.word	0x40023800
 8002c98:	08007a80 	.word	0x08007a80
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	20000004 	.word	0x20000004

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca8:	b090      	sub	sp, #64	; 0x40
 8002caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	f200 80a1 	bhi.w	8002e10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x3a>
 8002cd6:	e09b      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cdc:	e09b      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ce2:	e098      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cee:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d028      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	2200      	movs	r2, #0
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	627a      	str	r2, [r7, #36]	; 0x24
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d10:	fb03 f201 	mul.w	r2, r3, r1
 8002d14:	2300      	movs	r3, #0
 8002d16:	fb00 f303 	mul.w	r3, r0, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a43      	ldr	r2, [pc, #268]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d24:	460a      	mov	r2, r1
 8002d26:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2a:	4413      	add	r3, r2
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	2200      	movs	r2, #0
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	61fa      	str	r2, [r7, #28]
 8002d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d3e:	f7fd fa4b 	bl	80001d8 <__aeabi_uldivmod>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4613      	mov	r3, r2
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4a:	e053      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4c:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	2200      	movs	r2, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	617a      	str	r2, [r7, #20]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d5e:	f04f 0b00 	mov.w	fp, #0
 8002d62:	4652      	mov	r2, sl
 8002d64:	465b      	mov	r3, fp
 8002d66:	f04f 0000 	mov.w	r0, #0
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	0159      	lsls	r1, r3, #5
 8002d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d74:	0150      	lsls	r0, r2, #5
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d96:	ebb2 0408 	subs.w	r4, r2, r8
 8002d9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	00eb      	lsls	r3, r5, #3
 8002da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dac:	00e2      	lsls	r2, r4, #3
 8002dae:	4614      	mov	r4, r2
 8002db0:	461d      	mov	r5, r3
 8002db2:	eb14 030a 	adds.w	r3, r4, sl
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	eb45 030b 	adc.w	r3, r5, fp
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	028b      	lsls	r3, r1, #10
 8002dce:	4621      	mov	r1, r4
 8002dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	028a      	lsls	r2, r1, #10
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	2200      	movs	r2, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	60fa      	str	r2, [r7, #12]
 8002de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de8:	f7fd f9f6 	bl	80001d8 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e0e:	e002      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3740      	adds	r7, #64	; 0x40
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	017d7840 	.word	0x017d7840

08002e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000000 	.word	0x20000000

08002e48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e48:	b084      	sub	sp, #16
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	f107 001c 	add.w	r0, r7, #28
 8002e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d122      	bne.n	8002ea6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f001 fbee 	bl	800467c <USB_CoreReset>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e01a      	b.n	8002edc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f001 fbe2 	bl	800467c <USB_CoreReset>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ece:	e005      	b.n	8002edc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d10b      	bne.n	8002efa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f043 0206 	orr.w	r2, r3, #6
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f06:	b004      	add	sp, #16
 8002f08:	4770      	bx	lr
	...

08002f0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d165      	bne.n	8002fec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4a41      	ldr	r2, [pc, #260]	; (8003028 <USB_SetTurnaroundTime+0x11c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d906      	bls.n	8002f36 <USB_SetTurnaroundTime+0x2a>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4a40      	ldr	r2, [pc, #256]	; (800302c <USB_SetTurnaroundTime+0x120>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d202      	bcs.n	8002f36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f30:	230f      	movs	r3, #15
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e062      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4a3c      	ldr	r2, [pc, #240]	; (800302c <USB_SetTurnaroundTime+0x120>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d306      	bcc.n	8002f4c <USB_SetTurnaroundTime+0x40>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <USB_SetTurnaroundTime+0x124>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d202      	bcs.n	8002f4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f46:	230e      	movs	r3, #14
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e057      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a38      	ldr	r2, [pc, #224]	; (8003030 <USB_SetTurnaroundTime+0x124>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d306      	bcc.n	8002f62 <USB_SetTurnaroundTime+0x56>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4a37      	ldr	r2, [pc, #220]	; (8003034 <USB_SetTurnaroundTime+0x128>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d202      	bcs.n	8002f62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f5c:	230d      	movs	r3, #13
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e04c      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a33      	ldr	r2, [pc, #204]	; (8003034 <USB_SetTurnaroundTime+0x128>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d306      	bcc.n	8002f78 <USB_SetTurnaroundTime+0x6c>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4a32      	ldr	r2, [pc, #200]	; (8003038 <USB_SetTurnaroundTime+0x12c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d802      	bhi.n	8002f78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f72:	230c      	movs	r3, #12
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e041      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a2f      	ldr	r2, [pc, #188]	; (8003038 <USB_SetTurnaroundTime+0x12c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d906      	bls.n	8002f8e <USB_SetTurnaroundTime+0x82>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4a2e      	ldr	r2, [pc, #184]	; (800303c <USB_SetTurnaroundTime+0x130>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d802      	bhi.n	8002f8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f88:	230b      	movs	r3, #11
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e036      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <USB_SetTurnaroundTime+0x130>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d906      	bls.n	8002fa4 <USB_SetTurnaroundTime+0x98>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4a29      	ldr	r2, [pc, #164]	; (8003040 <USB_SetTurnaroundTime+0x134>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d802      	bhi.n	8002fa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f9e:	230a      	movs	r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e02b      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4a26      	ldr	r2, [pc, #152]	; (8003040 <USB_SetTurnaroundTime+0x134>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d906      	bls.n	8002fba <USB_SetTurnaroundTime+0xae>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4a25      	ldr	r2, [pc, #148]	; (8003044 <USB_SetTurnaroundTime+0x138>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d202      	bcs.n	8002fba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002fb4:	2309      	movs	r3, #9
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	e020      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a21      	ldr	r2, [pc, #132]	; (8003044 <USB_SetTurnaroundTime+0x138>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d306      	bcc.n	8002fd0 <USB_SetTurnaroundTime+0xc4>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4a20      	ldr	r2, [pc, #128]	; (8003048 <USB_SetTurnaroundTime+0x13c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d802      	bhi.n	8002fd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002fca:	2308      	movs	r3, #8
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e015      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <USB_SetTurnaroundTime+0x13c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d906      	bls.n	8002fe6 <USB_SetTurnaroundTime+0xda>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4a1c      	ldr	r2, [pc, #112]	; (800304c <USB_SetTurnaroundTime+0x140>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d202      	bcs.n	8002fe6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002fe0:	2307      	movs	r3, #7
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	e00a      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e007      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ff2:	2309      	movs	r3, #9
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e001      	b.n	8002ffc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ff8:	2309      	movs	r3, #9
 8002ffa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	00d8acbf 	.word	0x00d8acbf
 800302c:	00e4e1c0 	.word	0x00e4e1c0
 8003030:	00f42400 	.word	0x00f42400
 8003034:	01067380 	.word	0x01067380
 8003038:	011a499f 	.word	0x011a499f
 800303c:	01312cff 	.word	0x01312cff
 8003040:	014ca43f 	.word	0x014ca43f
 8003044:	016e3600 	.word	0x016e3600
 8003048:	01a6ab1f 	.word	0x01a6ab1f
 800304c:	01e84800 	.word	0x01e84800

08003050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0201 	bic.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d115      	bne.n	80030e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7fd fd40 	bl	8000b48 <HAL_Delay>
      ms++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f001 fa45 	bl	800455e <USB_GetMode>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d01e      	beq.n	8003118 <USB_SetCurrentMode+0x84>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b31      	cmp	r3, #49	; 0x31
 80030de:	d9f0      	bls.n	80030c2 <USB_SetCurrentMode+0x2e>
 80030e0:	e01a      	b.n	8003118 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d115      	bne.n	8003114 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fd fd27 	bl	8000b48 <HAL_Delay>
      ms++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f001 fa2c 	bl	800455e <USB_GetMode>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <USB_SetCurrentMode+0x84>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b31      	cmp	r3, #49	; 0x31
 8003110:	d9f0      	bls.n	80030f4 <USB_SetCurrentMode+0x60>
 8003112:	e001      	b.n	8003118 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e005      	b.n	8003124 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b32      	cmp	r3, #50	; 0x32
 800311c:	d101      	bne.n	8003122 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800312c:	b084      	sub	sp, #16
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800313a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	e009      	b.n	8003160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	3340      	adds	r3, #64	; 0x40
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	2200      	movs	r2, #0
 8003158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3301      	adds	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0e      	cmp	r3, #14
 8003164:	d9f2      	bls.n	800314c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d11c      	bne.n	80031a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
 80031a4:	e00b      	b.n	80031be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031c4:	461a      	mov	r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	4619      	mov	r1, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d8:	461a      	mov	r2, r3
 80031da:	680b      	ldr	r3, [r1, #0]
 80031dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10c      	bne.n	80031fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031ea:	2100      	movs	r1, #0
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f965 	bl	80034bc <USB_SetDevSpeed>
 80031f2:	e008      	b.n	8003206 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031f4:	2101      	movs	r1, #1
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f960 	bl	80034bc <USB_SetDevSpeed>
 80031fc:	e003      	b.n	8003206 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031fe:	2103      	movs	r1, #3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f95b 	bl	80034bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003206:	2110      	movs	r1, #16
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f8f3 	bl	80033f4 <USB_FlushTxFifo>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f91f 	bl	800345c <USB_FlushRxFifo>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	461a      	mov	r2, r3
 8003230:	2300      	movs	r3, #0
 8003232:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323a:	461a      	mov	r2, r3
 800323c:	2300      	movs	r3, #0
 800323e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003246:	461a      	mov	r2, r3
 8003248:	2300      	movs	r3, #0
 800324a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	e043      	b.n	80032da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003268:	d118      	bne.n	800329c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327c:	461a      	mov	r2, r3
 800327e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e013      	b.n	80032ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003292:	461a      	mov	r2, r3
 8003294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e008      	b.n	80032ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a8:	461a      	mov	r2, r3
 80032aa:	2300      	movs	r3, #0
 80032ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ba:	461a      	mov	r2, r3
 80032bc:	2300      	movs	r3, #0
 80032be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	461a      	mov	r2, r3
 80032ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	3301      	adds	r3, #1
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3b7      	bcc.n	8003252 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e043      	b.n	8003370 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fe:	d118      	bne.n	8003332 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	461a      	mov	r2, r3
 8003314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e013      	b.n	8003344 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	461a      	mov	r2, r3
 800332a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e008      	b.n	8003344 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333e:	461a      	mov	r2, r3
 8003340:	2300      	movs	r3, #0
 8003342:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003350:	461a      	mov	r2, r3
 8003352:	2300      	movs	r3, #0
 8003354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	461a      	mov	r2, r3
 8003364:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3301      	adds	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	429a      	cmp	r2, r3
 8003376:	d3b7      	bcc.n	80032e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800338a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003398:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f043 0210 	orr.w	r2, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <USB_DevInit+0x2c4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f043 0208 	orr.w	r2, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ec:	b004      	add	sp, #16
 80033ee:	4770      	bx	lr
 80033f0:	803c3800 	.word	0x803c3800

080033f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3301      	adds	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a13      	ldr	r2, [pc, #76]	; (8003458 <USB_FlushTxFifo+0x64>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e01b      	b.n	800344c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	daf2      	bge.n	8003402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	019b      	lsls	r3, r3, #6
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a08      	ldr	r2, [pc, #32]	; (8003458 <USB_FlushTxFifo+0x64>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e006      	b.n	800344c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d0f0      	beq.n	800342c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	00030d40 	.word	0x00030d40

0800345c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <USB_FlushRxFifo+0x5c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e018      	b.n	80034ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	daf2      	bge.n	8003468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2210      	movs	r2, #16
 800348a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <USB_FlushRxFifo+0x5c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e006      	b.n	80034ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d0f0      	beq.n	800348c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	00030d40 	.word	0x00030d40

080034bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b087      	sub	sp, #28
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0306 	and.w	r3, r3, #6
 8003506:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
 8003512:	e00a      	b.n	800352a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d002      	beq.n	8003520 <USB_GetDevSpeed+0x32>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d102      	bne.n	8003526 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003520:	2302      	movs	r3, #2
 8003522:	75fb      	strb	r3, [r7, #23]
 8003524:	e001      	b.n	800352a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003526:	230f      	movs	r3, #15
 8003528:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d13a      	bne.n	80035ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003572:	4313      	orrs	r3, r2
 8003574:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d155      	bne.n	8003638 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	059b      	lsls	r3, r3, #22
 80035ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035b0:	4313      	orrs	r3, r2
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	0151      	lsls	r1, r2, #5
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	440a      	add	r2, r1
 80035ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e036      	b.n	8003638 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11a      	bne.n	8003638 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	791b      	ldrb	r3, [r3, #4]
 800361c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800361e:	430b      	orrs	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d161      	bne.n	8003728 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800367a:	d11f      	bne.n	80036bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800369a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	0151      	lsls	r1, r2, #5
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	440a      	add	r2, r1
 80036b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036dc:	4013      	ands	r3, r2
 80036de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003700:	4013      	ands	r3, r2
 8003702:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0159      	lsls	r1, r3, #5
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	440b      	add	r3, r1
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	4619      	mov	r1, r3
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <USB_DeactivateEndpoint+0x1b0>)
 8003722:	4013      	ands	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
 8003726:	e060      	b.n	80037ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800373e:	d11f      	bne.n	8003780 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	0151      	lsls	r1, r2, #5
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	440a      	add	r2, r1
 8003756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800375e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	440a      	add	r2, r1
 8003776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800377a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800377e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	43db      	mvns	r3, r3
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a0:	4013      	ands	r3, r2
 80037a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	43db      	mvns	r3, r3
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c4:	4013      	ands	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	0159      	lsls	r1, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	440b      	add	r3, r1
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	4619      	mov	r1, r3
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <USB_DeactivateEndpoint+0x1b4>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	ec337800 	.word	0xec337800
 80037fc:	eff37800 	.word	0xeff37800

08003800 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	2b01      	cmp	r3, #1
 800381e:	f040 815c 	bne.w	8003ada <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d132      	bne.n	8003890 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800384c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	0151      	lsls	r1, r2, #5
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	440a      	add	r2, r1
 8003864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800386c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	0151      	lsls	r1, r2, #5
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	440a      	add	r2, r1
 8003884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003888:	0cdb      	lsrs	r3, r3, #19
 800388a:	04db      	lsls	r3, r3, #19
 800388c:	6113      	str	r3, [r2, #16]
 800388e:	e074      	b.n	800397a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	0151      	lsls	r1, r2, #5
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	440a      	add	r2, r1
 80038a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038aa:	0cdb      	lsrs	r3, r3, #19
 80038ac:	04db      	lsls	r3, r3, #19
 80038ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6999      	ldr	r1, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	440b      	add	r3, r1
 80038ec:	1e59      	subs	r1, r3, #1
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038f8:	4b9d      	ldr	r3, [pc, #628]	; (8003b70 <USB_EPStartXfer+0x370>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	0148      	lsls	r0, r1, #5
 8003900:	69f9      	ldr	r1, [r7, #28]
 8003902:	4401      	add	r1, r0
 8003904:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003908:	4313      	orrs	r3, r2
 800390a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	0148      	lsls	r0, r1, #5
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	4401      	add	r1, r0
 800392a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800392e:	4313      	orrs	r3, r2
 8003930:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	791b      	ldrb	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d11f      	bne.n	800397a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	0151      	lsls	r1, r2, #5
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	440a      	add	r2, r1
 8003950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003954:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003958:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	0151      	lsls	r1, r2, #5
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	440a      	add	r2, r1
 8003970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003978:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d14b      	bne.n	8003a18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	791b      	ldrb	r3, [r3, #4]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d128      	bne.n	80039f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d110      	bne.n	80039d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e00f      	b.n	80039f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	0151      	lsls	r1, r2, #5
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	440a      	add	r2, r1
 80039ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	0151      	lsls	r1, r2, #5
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e133      	b.n	8003c80 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	791b      	ldrb	r3, [r3, #4]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d015      	beq.n	8003a6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 811b 	beq.w	8003c80 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	69f9      	ldr	r1, [r7, #28]
 8003a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a66:	4313      	orrs	r3, r2
 8003a68:	634b      	str	r3, [r1, #52]	; 0x34
 8003a6a:	e109      	b.n	8003c80 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d110      	bne.n	8003a9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e00f      	b.n	8003abe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	0151      	lsls	r1, r2, #5
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	440a      	add	r2, r1
 8003ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6919      	ldr	r1, [r3, #16]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	b298      	uxth	r0, r3
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fade 	bl	8004094 <USB_WritePacket>
 8003ad8:	e0d2      	b.n	8003c80 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af4:	0cdb      	lsrs	r3, r3, #19
 8003af6:	04db      	lsls	r3, r3, #19
 8003af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d126      	bne.n	8003b74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	0148      	lsls	r0, r1, #5
 8003b40:	69f9      	ldr	r1, [r7, #28]
 8003b42:	4401      	add	r1, r0
 8003b44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b6a:	6113      	str	r3, [r2, #16]
 8003b6c:	e03a      	b.n	8003be4 <USB_EPStartXfer+0x3e4>
 8003b6e:	bf00      	nop
 8003b70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	1e5a      	subs	r2, r3, #1
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	8afa      	ldrh	r2, [r7, #22]
 8003b90:	fb03 f202 	mul.w	r2, r3, r2
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	8afb      	ldrh	r3, [r7, #22]
 8003ba8:	04d9      	lsls	r1, r3, #19
 8003baa:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <USB_EPStartXfer+0x48c>)
 8003bac:	400b      	ands	r3, r1
 8003bae:	69b9      	ldr	r1, [r7, #24]
 8003bb0:	0148      	lsls	r0, r1, #5
 8003bb2:	69f9      	ldr	r1, [r7, #28]
 8003bb4:	4401      	add	r1, r0
 8003bb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	0148      	lsls	r0, r1, #5
 8003bd8:	69f9      	ldr	r1, [r7, #28]
 8003bda:	4401      	add	r1, r0
 8003bdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003be0:	4313      	orrs	r3, r2
 8003be2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10d      	bne.n	8003c06 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6919      	ldr	r1, [r3, #16]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	460a      	mov	r2, r1
 8003c04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	791b      	ldrb	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d128      	bne.n	8003c60 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d110      	bne.n	8003c40 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e00f      	b.n	8003c60 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	1ff80000 	.word	0x1ff80000

08003c90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	f040 80ce 	bne.w	8003e4e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d132      	bne.n	8003d20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d18:	0cdb      	lsrs	r3, r3, #19
 8003d1a:	04db      	lsls	r3, r3, #19
 8003d1c:	6113      	str	r3, [r2, #16]
 8003d1e:	e04e      	b.n	8003dbe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	0cdb      	lsrs	r3, r3, #19
 8003d3c:	04db      	lsls	r3, r3, #19
 8003d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d903      	bls.n	8003d78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	0151      	lsls	r1, r2, #5
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	440a      	add	r2, r1
 8003d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	6939      	ldr	r1, [r7, #16]
 8003db0:	0148      	lsls	r0, r1, #5
 8003db2:	6979      	ldr	r1, [r7, #20]
 8003db4:	4401      	add	r1, r0
 8003db6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d11e      	bne.n	8003e02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	440a      	add	r2, r1
 8003df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e097      	b.n	8003f32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	0151      	lsls	r1, r2, #5
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	440a      	add	r2, r1
 8003e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8083 	beq.w	8003f32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	6979      	ldr	r1, [r7, #20]
 8003e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	634b      	str	r3, [r1, #52]	; 0x34
 8003e4c:	e071      	b.n	8003f32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	0151      	lsls	r1, r2, #5
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	440a      	add	r2, r1
 8003e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e68:	0cdb      	lsrs	r3, r3, #19
 8003e6a:	04db      	lsls	r3, r3, #19
 8003e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	0151      	lsls	r1, r2, #5
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	0151      	lsls	r1, r2, #5
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	0148      	lsls	r0, r1, #5
 8003ee4:	6979      	ldr	r1, [r7, #20]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003eec:	4313      	orrs	r3, r2
 8003eee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10d      	bne.n	8003f12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6919      	ldr	r1, [r3, #16]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	460a      	mov	r2, r1
 8003f10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	0151      	lsls	r1, r2, #5
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	440a      	add	r2, r1
 8003f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d14a      	bne.n	8003ff4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f76:	f040 8086 	bne.w	8004086 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d902      	bls.n	8003fd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8003fd6:	e056      	b.n	8004086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff0:	d0e7      	beq.n	8003fc2 <USB_EPStopXfer+0x82>
 8003ff2:	e048      	b.n	8004086 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400c:	d13b      	bne.n	8004086 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004030:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004062:	4293      	cmp	r3, r2
 8004064:	d902      	bls.n	800406c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
          break;
 800406a:	e00c      	b.n	8004086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004084:	d0e7      	beq.n	8004056 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	; 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	4611      	mov	r1, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	460b      	mov	r3, r1
 80040a4:	71fb      	strb	r3, [r7, #7]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80040b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d123      	bne.n	8004102 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80040ba:	88bb      	ldrh	r3, [r7, #4]
 80040bc:	3303      	adds	r3, #3
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e018      	b.n	80040fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	031a      	lsls	r2, r3, #12
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d4:	461a      	mov	r2, r3
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	3301      	adds	r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d3e2      	bcc.n	80040c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3724      	adds	r7, #36	; 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004110:	b480      	push	{r7}
 8004112:	b08b      	sub	sp, #44	; 0x2c
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	b29b      	uxth	r3, r3
 800412c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	e014      	b.n	8004166 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	601a      	str	r2, [r3, #0]
    pDest++;
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	3301      	adds	r3, #1
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	3301      	adds	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	3301      	adds	r3, #1
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	3301      	adds	r3, #1
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	3301      	adds	r3, #1
 8004164:	623b      	str	r3, [r7, #32]
 8004166:	6a3a      	ldr	r2, [r7, #32]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	429a      	cmp	r2, r3
 800416c:	d3e6      	bcc.n	800413c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800416e:	8bfb      	ldrh	r3, [r7, #30]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01e      	beq.n	80041b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417e:	461a      	mov	r2, r3
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
 8004194:	b2da      	uxtb	r2, r3
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	701a      	strb	r2, [r3, #0]
      i++;
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	3301      	adds	r3, #1
 800419e:	623b      	str	r3, [r7, #32]
      pDest++;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	3301      	adds	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80041a6:	8bfb      	ldrh	r3, [r7, #30]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80041ac:	8bfb      	ldrh	r3, [r7, #30]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ea      	bne.n	8004188 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	372c      	adds	r7, #44	; 0x2c
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d12c      	bne.n	8004236 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	db12      	blt.n	8004214 <USB_EPSetStall+0x54>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00f      	beq.n	8004214 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004212:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e02b      	b.n	800428e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db12      	blt.n	800426e <USB_EPSetStall+0xae>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00f      	beq.n	800426e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800426c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800428c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d128      	bne.n	800430a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d003      	beq.n	80042e8 <USB_EPClearStall+0x4c>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	791b      	ldrb	r3, [r3, #4]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d138      	bne.n	800435a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	e027      	b.n	800435a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004328:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	791b      	ldrb	r3, [r3, #4]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d003      	beq.n	800433a <USB_EPClearStall+0x9e>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	791b      	ldrb	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d10f      	bne.n	800435a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004358:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800438a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043ce:	f023 0303 	bic.w	r3, r3, #3
 80043d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e2:	f023 0302 	bic.w	r3, r3, #2
 80043e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004410:	f023 0303 	bic.w	r3, r3, #3
 8004414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	0c1b      	lsrs	r3, r3, #16
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	b29b      	uxth	r3, r3
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044f4:	68bb      	ldr	r3, [r7, #8]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	01db      	lsls	r3, r3, #7
 8004534:	b2db      	uxtb	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004550:	68bb      	ldr	r3, [r7, #8]
}
 8004552:	4618      	mov	r0, r3
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0301 	and.w	r3, r3, #1
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004594:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004598:	f023 0307 	bic.w	r3, r3, #7
 800459c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	460b      	mov	r3, r1
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	333c      	adds	r3, #60	; 0x3c
 80045d6:	3304      	adds	r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4a26      	ldr	r2, [pc, #152]	; (8004678 <USB_EP0_OutStart+0xb8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d90a      	bls.n	80045fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f4:	d101      	bne.n	80045fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e037      	b.n	800466a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004600:	461a      	mov	r2, r3
 8004602:	2300      	movs	r3, #0
 8004604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f043 0318 	orr.w	r3, r3, #24
 800462c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004642:	7afb      	ldrb	r3, [r7, #11]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10f      	bne.n	8004668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004662:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	4f54300a 	.word	0x4f54300a

0800467c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <USB_CoreReset+0x64>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e01b      	b.n	80046d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	daf2      	bge.n	8004688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <USB_CoreReset+0x64>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e006      	b.n	80046d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d0f0      	beq.n	80046b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	00030d40 	.word	0x00030d40

080046e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80046f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80046f4:	f002 fc8a 	bl	800700c <USBD_static_malloc>
 80046f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	32b0      	adds	r2, #176	; 0xb0
 800470a:	2100      	movs	r1, #0
 800470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004710:	2302      	movs	r3, #2
 8004712:	e0d4      	b.n	80048be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004714:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004718:	2100      	movs	r1, #0
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f002 feb0 	bl	8007480 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	32b0      	adds	r2, #176	; 0xb0
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	32b0      	adds	r2, #176	; 0xb0
 800473a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7c1b      	ldrb	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d138      	bne.n	80047be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800474c:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <USBD_CDC_Init+0x1e4>)
 800474e:	7819      	ldrb	r1, [r3, #0]
 8004750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004754:	2202      	movs	r2, #2
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f002 fb35 	bl	8006dc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800475c:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <USBD_CDC_Init+0x1e4>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	f003 020f 	and.w	r2, r3, #15
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3324      	adds	r3, #36	; 0x24
 8004772:	2201      	movs	r2, #1
 8004774:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004776:	4b55      	ldr	r3, [pc, #340]	; (80048cc <USBD_CDC_Init+0x1e8>)
 8004778:	7819      	ldrb	r1, [r3, #0]
 800477a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800477e:	2202      	movs	r2, #2
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f002 fb20 	bl	8006dc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004786:	4b51      	ldr	r3, [pc, #324]	; (80048cc <USBD_CDC_Init+0x1e8>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800479e:	2201      	movs	r2, #1
 80047a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80047a2:	4b4b      	ldr	r3, [pc, #300]	; (80048d0 <USBD_CDC_Init+0x1ec>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3326      	adds	r3, #38	; 0x26
 80047b8:	2210      	movs	r2, #16
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	e035      	b.n	800482a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80047be:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <USBD_CDC_Init+0x1e4>)
 80047c0:	7819      	ldrb	r1, [r3, #0]
 80047c2:	2340      	movs	r3, #64	; 0x40
 80047c4:	2202      	movs	r2, #2
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f002 fafd 	bl	8006dc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80047cc:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <USBD_CDC_Init+0x1e4>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	f003 020f 	and.w	r2, r3, #15
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3324      	adds	r3, #36	; 0x24
 80047e2:	2201      	movs	r2, #1
 80047e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80047e6:	4b39      	ldr	r3, [pc, #228]	; (80048cc <USBD_CDC_Init+0x1e8>)
 80047e8:	7819      	ldrb	r1, [r3, #0]
 80047ea:	2340      	movs	r3, #64	; 0x40
 80047ec:	2202      	movs	r2, #2
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f002 fae9 	bl	8006dc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <USBD_CDC_Init+0x1e8>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800480c:	2201      	movs	r2, #1
 800480e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004810:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <USBD_CDC_Init+0x1ec>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	3326      	adds	r3, #38	; 0x26
 8004826:	2210      	movs	r2, #16
 8004828:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800482a:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <USBD_CDC_Init+0x1ec>)
 800482c:	7819      	ldrb	r1, [r3, #0]
 800482e:	2308      	movs	r3, #8
 8004830:	2203      	movs	r2, #3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f002 fac7 	bl	8006dc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <USBD_CDC_Init+0x1ec>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	3324      	adds	r3, #36	; 0x24
 800484e:	2201      	movs	r2, #1
 8004850:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	33b0      	adds	r3, #176	; 0xb0
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004888:	2302      	movs	r3, #2
 800488a:	e018      	b.n	80048be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7c1b      	ldrb	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <USBD_CDC_Init+0x1e8>)
 8004896:	7819      	ldrb	r1, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800489e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f002 fb7e 	bl	8006fa4 <USBD_LL_PrepareReceive>
 80048a8:	e008      	b.n	80048bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <USBD_CDC_Init+0x1e8>)
 80048ac:	7819      	ldrb	r1, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048b4:	2340      	movs	r3, #64	; 0x40
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f002 fb74 	bl	8006fa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000093 	.word	0x20000093
 80048cc:	20000094 	.word	0x20000094
 80048d0:	20000095 	.word	0x20000095

080048d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80048e0:	4b3a      	ldr	r3, [pc, #232]	; (80049cc <USBD_CDC_DeInit+0xf8>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f002 fa93 	bl	8006e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80048ec:	4b37      	ldr	r3, [pc, #220]	; (80049cc <USBD_CDC_DeInit+0xf8>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	2200      	movs	r2, #0
 8004904:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004906:	4b32      	ldr	r3, [pc, #200]	; (80049d0 <USBD_CDC_DeInit+0xfc>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f002 fa80 	bl	8006e12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004912:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <USBD_CDC_DeInit+0xfc>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	f003 020f 	and.w	r2, r3, #15
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800492a:	2200      	movs	r2, #0
 800492c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800492e:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <USBD_CDC_DeInit+0x100>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f002 fa6c 	bl	8006e12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <USBD_CDC_DeInit+0x100>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	f003 020f 	and.w	r2, r3, #15
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	2200      	movs	r2, #0
 8004952:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004954:	4b1f      	ldr	r3, [pc, #124]	; (80049d4 <USBD_CDC_DeInit+0x100>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f003 020f 	and.w	r2, r3, #15
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	3326      	adds	r3, #38	; 0x26
 800496a:	2200      	movs	r2, #0
 800496c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	32b0      	adds	r2, #176	; 0xb0
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01f      	beq.n	80049c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	33b0      	adds	r3, #176	; 0xb0
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	32b0      	adds	r2, #176	; 0xb0
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f002 fb40 	bl	8007028 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	32b0      	adds	r2, #176	; 0xb0
 80049b2:	2100      	movs	r1, #0
 80049b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000093 	.word	0x20000093
 80049d0:	20000094 	.word	0x20000094
 80049d4:	20000095 	.word	0x20000095

080049d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	32b0      	adds	r2, #176	; 0xb0
 80049ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0bf      	b.n	8004b88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d050      	beq.n	8004ab6 <USBD_CDC_Setup+0xde>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	f040 80af 	bne.w	8004b78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	88db      	ldrh	r3, [r3, #6]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d03a      	beq.n	8004a98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da1b      	bge.n	8004a64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	33b0      	adds	r3, #176	; 0xb0
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004a42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	88d2      	ldrh	r2, [r2, #6]
 8004a48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	88db      	ldrh	r3, [r3, #6]
 8004a4e:	2b07      	cmp	r3, #7
 8004a50:	bf28      	it	cs
 8004a52:	2307      	movcs	r3, #7
 8004a54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	89fa      	ldrh	r2, [r7, #14]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 fd89 	bl	8006574 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004a62:	e090      	b.n	8004b86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	785a      	ldrb	r2, [r3, #1]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	88db      	ldrh	r3, [r3, #6]
 8004a72:	2b3f      	cmp	r3, #63	; 0x3f
 8004a74:	d803      	bhi.n	8004a7e <USBD_CDC_Setup+0xa6>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	88db      	ldrh	r3, [r3, #6]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	e000      	b.n	8004a80 <USBD_CDC_Setup+0xa8>
 8004a7e:	2240      	movs	r2, #64	; 0x40
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004a86:	6939      	ldr	r1, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 fd9b 	bl	80065cc <USBD_CtlPrepareRx>
      break;
 8004a96:	e076      	b.n	8004b86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	33b0      	adds	r3, #176	; 0xb0
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	7850      	ldrb	r0, [r2, #1]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	4798      	blx	r3
      break;
 8004ab4:	e067      	b.n	8004b86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	2b0b      	cmp	r3, #11
 8004abc:	d851      	bhi.n	8004b62 <USBD_CDC_Setup+0x18a>
 8004abe:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <USBD_CDC_Setup+0xec>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004af5 	.word	0x08004af5
 8004ac8:	08004b71 	.word	0x08004b71
 8004acc:	08004b63 	.word	0x08004b63
 8004ad0:	08004b63 	.word	0x08004b63
 8004ad4:	08004b63 	.word	0x08004b63
 8004ad8:	08004b63 	.word	0x08004b63
 8004adc:	08004b63 	.word	0x08004b63
 8004ae0:	08004b63 	.word	0x08004b63
 8004ae4:	08004b63 	.word	0x08004b63
 8004ae8:	08004b63 	.word	0x08004b63
 8004aec:	08004b1f 	.word	0x08004b1f
 8004af0:	08004b49 	.word	0x08004b49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d107      	bne.n	8004b10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004b00:	f107 030a 	add.w	r3, r7, #10
 8004b04:	2202      	movs	r2, #2
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f001 fd33 	bl	8006574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b0e:	e032      	b.n	8004b76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f001 fcbd 	bl	8006492 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	75fb      	strb	r3, [r7, #23]
          break;
 8004b1c:	e02b      	b.n	8004b76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d107      	bne.n	8004b3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004b2a:	f107 030d 	add.w	r3, r7, #13
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 fd1e 	bl	8006574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b38:	e01d      	b.n	8004b76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f001 fca8 	bl	8006492 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b42:	2303      	movs	r3, #3
 8004b44:	75fb      	strb	r3, [r7, #23]
          break;
 8004b46:	e016      	b.n	8004b76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d00f      	beq.n	8004b74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 fc9b 	bl	8006492 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b60:	e008      	b.n	8004b74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004b62:	6839      	ldr	r1, [r7, #0]
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f001 fc94 	bl	8006492 <USBD_CtlError>
          ret = USBD_FAIL;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004b6e:	e002      	b.n	8004b76 <USBD_CDC_Setup+0x19e>
          break;
 8004b70:	bf00      	nop
 8004b72:	e008      	b.n	8004b86 <USBD_CDC_Setup+0x1ae>
          break;
 8004b74:	bf00      	nop
      }
      break;
 8004b76:	e006      	b.n	8004b86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f001 fc89 	bl	8006492 <USBD_CtlError>
      ret = USBD_FAIL;
 8004b80:	2303      	movs	r3, #3
 8004b82:	75fb      	strb	r3, [r7, #23]
      break;
 8004b84:	bf00      	nop
  }

  return (uint8_t)ret;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004ba2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	32b0      	adds	r2, #176	; 0xb0
 8004bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e065      	b.n	8004c86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	32b0      	adds	r2, #176	; 0xb0
 8004bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3318      	adds	r3, #24
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d02f      	beq.n	8004c44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 010f 	and.w	r1, r3, #15
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	460b      	mov	r3, r1
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	440b      	add	r3, r1
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4403      	add	r3, r0
 8004c0c:	3348      	adds	r3, #72	; 0x48
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	fbb2 f1f3 	udiv	r1, r2, r3
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d112      	bne.n	8004c44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3318      	adds	r3, #24
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004c36:	78f9      	ldrb	r1, [r7, #3]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f002 f990 	bl	8006f62 <USBD_LL_Transmit>
 8004c42:	e01f      	b.n	8004c84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	33b0      	adds	r3, #176	; 0xb0
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d010      	beq.n	8004c84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	33b0      	adds	r3, #176	; 0xb0
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	32b0      	adds	r2, #176	; 0xb0
 8004ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	32b0      	adds	r2, #176	; 0xb0
 8004cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e01a      	b.n	8004cf6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f002 f98e 	bl	8006fe6 <USBD_LL_GetRxDataSize>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	33b0      	adds	r3, #176	; 0xb0
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	32b0      	adds	r2, #176	; 0xb0
 8004d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e025      	b.n	8004d6c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	33b0      	adds	r3, #176	; 0xb0
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01a      	beq.n	8004d6a <USBD_CDC_EP0_RxReady+0x6c>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d3a:	2bff      	cmp	r3, #255	; 0xff
 8004d3c:	d015      	beq.n	8004d6a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	33b0      	adds	r3, #176	; 0xb0
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004d56:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d5e:	b292      	uxth	r2, r2
 8004d60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d7c:	2182      	movs	r1, #130	; 0x82
 8004d7e:	4818      	ldr	r0, [pc, #96]	; (8004de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d80:	f000 fd4f 	bl	8005822 <USBD_GetEpDesc>
 8004d84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d86:	2101      	movs	r1, #1
 8004d88:	4815      	ldr	r0, [pc, #84]	; (8004de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d8a:	f000 fd4a 	bl	8005822 <USBD_GetEpDesc>
 8004d8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d90:	2181      	movs	r1, #129	; 0x81
 8004d92:	4813      	ldr	r0, [pc, #76]	; (8004de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d94:	f000 fd45 	bl	8005822 <USBD_GetEpDesc>
 8004d98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2210      	movs	r2, #16
 8004da4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d006      	beq.n	8004dba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db4:	711a      	strb	r2, [r3, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d006      	beq.n	8004dce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc8:	711a      	strb	r2, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2243      	movs	r2, #67	; 0x43
 8004dd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000050 	.word	0x20000050

08004de4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004dec:	2182      	movs	r1, #130	; 0x82
 8004dee:	4818      	ldr	r0, [pc, #96]	; (8004e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004df0:	f000 fd17 	bl	8005822 <USBD_GetEpDesc>
 8004df4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004df6:	2101      	movs	r1, #1
 8004df8:	4815      	ldr	r0, [pc, #84]	; (8004e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004dfa:	f000 fd12 	bl	8005822 <USBD_GetEpDesc>
 8004dfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e00:	2181      	movs	r1, #129	; 0x81
 8004e02:	4813      	ldr	r0, [pc, #76]	; (8004e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004e04:	f000 fd0d 	bl	8005822 <USBD_GetEpDesc>
 8004e08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2210      	movs	r2, #16
 8004e14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d006      	beq.n	8004e2a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	711a      	strb	r2, [r3, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f042 0202 	orr.w	r2, r2, #2
 8004e28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d006      	beq.n	8004e3e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	711a      	strb	r2, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f042 0202 	orr.w	r2, r2, #2
 8004e3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2243      	movs	r2, #67	; 0x43
 8004e42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e44:	4b02      	ldr	r3, [pc, #8]	; (8004e50 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000050 	.word	0x20000050

08004e54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e5c:	2182      	movs	r1, #130	; 0x82
 8004e5e:	4818      	ldr	r0, [pc, #96]	; (8004ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e60:	f000 fcdf 	bl	8005822 <USBD_GetEpDesc>
 8004e64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e66:	2101      	movs	r1, #1
 8004e68:	4815      	ldr	r0, [pc, #84]	; (8004ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e6a:	f000 fcda 	bl	8005822 <USBD_GetEpDesc>
 8004e6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e70:	2181      	movs	r1, #129	; 0x81
 8004e72:	4813      	ldr	r0, [pc, #76]	; (8004ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e74:	f000 fcd5 	bl	8005822 <USBD_GetEpDesc>
 8004e78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2210      	movs	r2, #16
 8004e84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d006      	beq.n	8004e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e94:	711a      	strb	r2, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d006      	beq.n	8004eae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea8:	711a      	strb	r2, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2243      	movs	r2, #67	; 0x43
 8004eb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000050 	.word	0x20000050

08004ec4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	220a      	movs	r2, #10
 8004ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ed2:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	2000000c 	.word	0x2000000c

08004ee4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e009      	b.n	8004f0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	33b0      	adds	r3, #176	; 0xb0
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	32b0      	adds	r2, #176	; 0xb0
 8004f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e008      	b.n	8004f50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	32b0      	adds	r2, #176	; 0xb0
 8004f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e004      	b.n	8004f8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	32b0      	adds	r2, #176	; 0xb0
 8004faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	32b0      	adds	r2, #176	; 0xb0
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e025      	b.n	8005016 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11f      	bne.n	8005014 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <USBD_CDC_TransmitPacket+0x88>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4403      	add	r3, r0
 8004ff6:	3318      	adds	r3, #24
 8004ff8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <USBD_CDC_TransmitPacket+0x88>)
 8004ffc:	7819      	ldrb	r1, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 ffa9 	bl	8006f62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000093 	.word	0x20000093

08005024 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	32b0      	adds	r2, #176	; 0xb0
 8005036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	32b0      	adds	r2, #176	; 0xb0
 8005046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800504e:	2303      	movs	r3, #3
 8005050:	e018      	b.n	8005084 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	7c1b      	ldrb	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <USBD_CDC_ReceivePacket+0x68>)
 800505c:	7819      	ldrb	r1, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 ff9b 	bl	8006fa4 <USBD_LL_PrepareReceive>
 800506e:	e008      	b.n	8005082 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <USBD_CDC_ReceivePacket+0x68>)
 8005072:	7819      	ldrb	r1, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 ff91 	bl	8006fa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000094 	.word	0x20000094

08005090 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e01f      	b.n	80050e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	79fa      	ldrb	r2, [r7, #7]
 80050da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f001 fe0b 	bl	8006cf8 <USBD_LL_Init>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	e025      	b.n	8005154 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	32ae      	adds	r2, #174	; 0xae
 800511a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00f      	beq.n	8005144 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	32ae      	adds	r2, #174	; 0xae
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	f107 020e 	add.w	r2, r7, #14
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3
 800513c:	4602      	mov	r2, r0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fe13 	bl	8006d90 <USBD_LL_Start>
 800516a:	4603      	mov	r3, r0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800517c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	460b      	mov	r3, r1
 8005194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	4611      	mov	r1, r2
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	4611      	mov	r1, r2
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80051e8:	2303      	movs	r3, #3
 80051ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f001 f908 	bl	800641e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2b02      	cmp	r3, #2
 8005230:	d01a      	beq.n	8005268 <USBD_LL_SetupStage+0x72>
 8005232:	2b02      	cmp	r3, #2
 8005234:	d822      	bhi.n	800527c <USBD_LL_SetupStage+0x86>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <USBD_LL_SetupStage+0x4a>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00a      	beq.n	8005254 <USBD_LL_SetupStage+0x5e>
 800523e:	e01d      	b.n	800527c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb5f 	bl	800590c <USBD_StdDevReq>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]
      break;
 8005252:	e020      	b.n	8005296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fbc7 	bl	80059f0 <USBD_StdItfReq>
 8005262:	4603      	mov	r3, r0
 8005264:	73fb      	strb	r3, [r7, #15]
      break;
 8005266:	e016      	b.n	8005296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fc29 	bl	8005ac8 <USBD_StdEPReq>
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
      break;
 800527a:	e00c      	b.n	8005296 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005282:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005286:	b2db      	uxtb	r3, r3
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f001 fde0 	bl	8006e50 <USBD_LL_StallEP>
 8005290:	4603      	mov	r3, r0
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	bf00      	nop
  }

  return ret;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	460b      	mov	r3, r1
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d16e      	bne.n	8005396 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	f040 8098 	bne.w	80053fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d913      	bls.n	8005300 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	1ad2      	subs	r2, r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bf28      	it	cs
 80052f2:	4613      	movcs	r3, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f001 f984 	bl	8006606 <USBD_CtlContinueRx>
 80052fe:	e07d      	b.n	80053fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2b02      	cmp	r3, #2
 800530c:	d014      	beq.n	8005338 <USBD_LL_DataOutStage+0x98>
 800530e:	2b02      	cmp	r3, #2
 8005310:	d81d      	bhi.n	800534e <USBD_LL_DataOutStage+0xae>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <USBD_LL_DataOutStage+0x7c>
 8005316:	2b01      	cmp	r3, #1
 8005318:	d003      	beq.n	8005322 <USBD_LL_DataOutStage+0x82>
 800531a:	e018      	b.n	800534e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	75bb      	strb	r3, [r7, #22]
            break;
 8005320:	e018      	b.n	8005354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005328:	b2db      	uxtb	r3, r3
 800532a:	4619      	mov	r1, r3
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fa5e 	bl	80057ee <USBD_CoreFindIF>
 8005332:	4603      	mov	r3, r0
 8005334:	75bb      	strb	r3, [r7, #22]
            break;
 8005336:	e00d      	b.n	8005354 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800533e:	b2db      	uxtb	r3, r3
 8005340:	4619      	mov	r1, r3
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa60 	bl	8005808 <USBD_CoreFindEP>
 8005348:	4603      	mov	r3, r0
 800534a:	75bb      	strb	r3, [r7, #22]
            break;
 800534c:	e002      	b.n	8005354 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	75bb      	strb	r3, [r7, #22]
            break;
 8005352:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005354:	7dbb      	ldrb	r3, [r7, #22]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d119      	bne.n	800538e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b03      	cmp	r3, #3
 8005364:	d113      	bne.n	800538e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005366:	7dba      	ldrb	r2, [r7, #22]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	32ae      	adds	r2, #174	; 0xae
 800536c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005376:	7dba      	ldrb	r2, [r7, #22]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800537e:	7dba      	ldrb	r2, [r7, #22]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	32ae      	adds	r2, #174	; 0xae
 8005384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f001 f94a 	bl	8006628 <USBD_CtlSendStatus>
 8005394:	e032      	b.n	80053fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005396:	7afb      	ldrb	r3, [r7, #11]
 8005398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800539c:	b2db      	uxtb	r3, r3
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 fa31 	bl	8005808 <USBD_CoreFindEP>
 80053a6:	4603      	mov	r3, r0
 80053a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80053aa:	7dbb      	ldrb	r3, [r7, #22]
 80053ac:	2bff      	cmp	r3, #255	; 0xff
 80053ae:	d025      	beq.n	80053fc <USBD_LL_DataOutStage+0x15c>
 80053b0:	7dbb      	ldrb	r3, [r7, #22]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d122      	bne.n	80053fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d117      	bne.n	80053f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80053c2:	7dba      	ldrb	r2, [r7, #22]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	32ae      	adds	r2, #174	; 0xae
 80053c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00f      	beq.n	80053f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80053d2:	7dba      	ldrb	r2, [r7, #22]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80053da:	7dba      	ldrb	r2, [r7, #22]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	32ae      	adds	r2, #174	; 0xae
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	7afa      	ldrb	r2, [r7, #11]
 80053e8:	4611      	mov	r1, r2
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	4798      	blx	r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	e000      	b.n	80053fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b086      	sub	sp, #24
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	460b      	mov	r3, r1
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005414:	7afb      	ldrb	r3, [r7, #11]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d16f      	bne.n	80054fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3314      	adds	r3, #20
 800541e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005426:	2b02      	cmp	r3, #2
 8005428:	d15a      	bne.n	80054e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	429a      	cmp	r2, r3
 8005434:	d914      	bls.n	8005460 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	461a      	mov	r2, r3
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f001 f8ac 	bl	80065aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005452:	2300      	movs	r3, #0
 8005454:	2200      	movs	r2, #0
 8005456:	2100      	movs	r1, #0
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 fda3 	bl	8006fa4 <USBD_LL_PrepareReceive>
 800545e:	e03f      	b.n	80054e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d11c      	bne.n	80054a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005474:	429a      	cmp	r2, r3
 8005476:	d316      	bcc.n	80054a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005482:	429a      	cmp	r2, r3
 8005484:	d20f      	bcs.n	80054a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005486:	2200      	movs	r2, #0
 8005488:	2100      	movs	r1, #0
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 f88d 	bl	80065aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005498:	2300      	movs	r3, #0
 800549a:	2200      	movs	r2, #0
 800549c:	2100      	movs	r1, #0
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f001 fd80 	bl	8006fa4 <USBD_LL_PrepareReceive>
 80054a4:	e01c      	b.n	80054e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d10f      	bne.n	80054d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f001 fcbb 	bl	8006e50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f001 f8b7 	bl	800664e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d03a      	beq.n	8005560 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff fe42 	bl	8005174 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80054f8:	e032      	b.n	8005560 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80054fa:	7afb      	ldrb	r3, [r7, #11]
 80054fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005500:	b2db      	uxtb	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f97f 	bl	8005808 <USBD_CoreFindEP>
 800550a:	4603      	mov	r3, r0
 800550c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2bff      	cmp	r3, #255	; 0xff
 8005512:	d025      	beq.n	8005560 <USBD_LL_DataInStage+0x15a>
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d122      	bne.n	8005560 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b03      	cmp	r3, #3
 8005524:	d11c      	bne.n	8005560 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005526:	7dfa      	ldrb	r2, [r7, #23]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	32ae      	adds	r2, #174	; 0xae
 800552c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d014      	beq.n	8005560 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005536:	7dfa      	ldrb	r2, [r7, #23]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800553e:	7dfa      	ldrb	r2, [r7, #23]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	32ae      	adds	r2, #174	; 0xae
 8005544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	7afa      	ldrb	r2, [r7, #11]
 800554c:	4611      	mov	r1, r2
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	4798      	blx	r3
 8005552:	4603      	mov	r3, r0
 8005554:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005556:	7dbb      	ldrb	r3, [r7, #22]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800555c:	7dbb      	ldrb	r3, [r7, #22]
 800555e:	e000      	b.n	8005562 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d014      	beq.n	80055d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00e      	beq.n	80055d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6852      	ldr	r2, [r2, #4]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	4611      	mov	r1, r2
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80055cc:	2303      	movs	r3, #3
 80055ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055d0:	2340      	movs	r3, #64	; 0x40
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 fbf5 	bl	8006dc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2240      	movs	r2, #64	; 0x40
 80055e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055ec:	2340      	movs	r3, #64	; 0x40
 80055ee:	2200      	movs	r2, #0
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fbe7 	bl	8006dc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2240      	movs	r2, #64	; 0x40
 8005602:	621a      	str	r2, [r3, #32]

  return ret;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800563c:	b2da      	uxtb	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b04      	cmp	r3, #4
 800566c:	d106      	bne.n	800567c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005674:	b2da      	uxtb	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b03      	cmp	r3, #3
 800569c:	d110      	bne.n	80056c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	32ae      	adds	r2, #174	; 0xae
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e01c      	b.n	8005726 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d115      	bne.n	8005724 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	32ae      	adds	r2, #174	; 0xae
 8005702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	32ae      	adds	r2, #174	; 0xae
 8005716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	4611      	mov	r1, r2
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	32ae      	adds	r2, #174	; 0xae
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	e01c      	b.n	800578a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b03      	cmp	r3, #3
 800575a:	d115      	bne.n	8005788 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	32ae      	adds	r2, #174	; 0xae
 8005766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	32ae      	adds	r2, #174	; 0xae
 800577a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	4611      	mov	r1, r2
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00e      	beq.n	80057e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6852      	ldr	r2, [r2, #4]
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	4611      	mov	r1, r2
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80057e0:	2303      	movs	r3, #3
 80057e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80057fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005814:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b086      	sub	sp, #24
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	885b      	ldrh	r3, [r3, #2]
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	429a      	cmp	r2, r3
 8005848:	d920      	bls.n	800588c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005852:	e013      	b.n	800587c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005854:	f107 030a 	add.w	r3, r7, #10
 8005858:	4619      	mov	r1, r3
 800585a:	6978      	ldr	r0, [r7, #20]
 800585c:	f000 f81b 	bl	8005896 <USBD_GetNextDesc>
 8005860:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b05      	cmp	r3, #5
 8005868:	d108      	bne.n	800587c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	789b      	ldrb	r3, [r3, #2]
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	429a      	cmp	r2, r3
 8005876:	d008      	beq.n	800588a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	885b      	ldrh	r3, [r3, #2]
 8005880:	b29a      	uxth	r2, r3
 8005882:	897b      	ldrh	r3, [r7, #10]
 8005884:	429a      	cmp	r2, r3
 8005886:	d8e5      	bhi.n	8005854 <USBD_GetEpDesc+0x32>
 8005888:	e000      	b.n	800588c <USBD_GetEpDesc+0x6a>
          break;
 800588a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800588c:	693b      	ldr	r3, [r7, #16]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	881a      	ldrh	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	3301      	adds	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80058ee:	8a3b      	ldrh	r3, [r7, #16]
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	b21a      	sxth	r2, r3
 80058f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b21b      	sxth	r3, r3
 80058fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80058fe:	89fb      	ldrh	r3, [r7, #14]
}
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d005      	beq.n	8005932 <USBD_StdDevReq+0x26>
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d857      	bhi.n	80059da <USBD_StdDevReq+0xce>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00f      	beq.n	800594e <USBD_StdDevReq+0x42>
 800592e:	2b20      	cmp	r3, #32
 8005930:	d153      	bne.n	80059da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	32ae      	adds	r2, #174	; 0xae
 800593c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e04a      	b.n	80059e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b09      	cmp	r3, #9
 8005954:	d83b      	bhi.n	80059ce <USBD_StdDevReq+0xc2>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <USBD_StdDevReq+0x50>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	080059b1 	.word	0x080059b1
 8005960:	080059c5 	.word	0x080059c5
 8005964:	080059cf 	.word	0x080059cf
 8005968:	080059bb 	.word	0x080059bb
 800596c:	080059cf 	.word	0x080059cf
 8005970:	0800598f 	.word	0x0800598f
 8005974:	08005985 	.word	0x08005985
 8005978:	080059cf 	.word	0x080059cf
 800597c:	080059a7 	.word	0x080059a7
 8005980:	08005999 	.word	0x08005999
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa3c 	bl	8005e04 <USBD_GetDescriptor>
          break;
 800598c:	e024      	b.n	80059d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fba1 	bl	80060d8 <USBD_SetAddress>
          break;
 8005996:	e01f      	b.n	80059d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fbe0 	bl	8006160 <USBD_SetConfig>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]
          break;
 80059a4:	e018      	b.n	80059d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fc83 	bl	80062b4 <USBD_GetConfig>
          break;
 80059ae:	e013      	b.n	80059d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fcb4 	bl	8006320 <USBD_GetStatus>
          break;
 80059b8:	e00e      	b.n	80059d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fce3 	bl	8006388 <USBD_SetFeature>
          break;
 80059c2:	e009      	b.n	80059d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fd07 	bl	80063da <USBD_ClrFeature>
          break;
 80059cc:	e004      	b.n	80059d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fd5e 	bl	8006492 <USBD_CtlError>
          break;
 80059d6:	bf00      	nop
      }
      break;
 80059d8:	e004      	b.n	80059e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fd58 	bl	8006492 <USBD_CtlError>
      break;
 80059e2:	bf00      	nop
  }

  return ret;
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop

080059f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d005      	beq.n	8005a16 <USBD_StdItfReq+0x26>
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d852      	bhi.n	8005ab4 <USBD_StdItfReq+0xc4>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <USBD_StdItfReq+0x26>
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d14e      	bne.n	8005ab4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d840      	bhi.n	8005aa6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	889b      	ldrh	r3, [r3, #4]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d836      	bhi.n	8005a9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	889b      	ldrh	r3, [r3, #4]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fed9 	bl	80057ee <USBD_CoreFindIF>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	2bff      	cmp	r3, #255	; 0xff
 8005a44:	d01d      	beq.n	8005a82 <USBD_StdItfReq+0x92>
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11a      	bne.n	8005a82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005a4c:	7bba      	ldrb	r2, [r7, #14]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	32ae      	adds	r2, #174	; 0xae
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00f      	beq.n	8005a7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005a5c:	7bba      	ldrb	r2, [r7, #14]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a64:	7bba      	ldrb	r2, [r7, #14]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	32ae      	adds	r2, #174	; 0xae
 8005a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005a7a:	e004      	b.n	8005a86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005a80:	e001      	b.n	8005a86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005a82:	2303      	movs	r3, #3
 8005a84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	88db      	ldrh	r3, [r3, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d110      	bne.n	8005ab0 <USBD_StdItfReq+0xc0>
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fdc7 	bl	8006628 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a9a:	e009      	b.n	8005ab0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fcf7 	bl	8006492 <USBD_CtlError>
          break;
 8005aa4:	e004      	b.n	8005ab0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fcf2 	bl	8006492 <USBD_CtlError>
          break;
 8005aae:	e000      	b.n	8005ab2 <USBD_StdItfReq+0xc2>
          break;
 8005ab0:	bf00      	nop
      }
      break;
 8005ab2:	e004      	b.n	8005abe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fceb 	bl	8006492 <USBD_CtlError>
      break;
 8005abc:	bf00      	nop
  }

  return ret;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	889b      	ldrh	r3, [r3, #4]
 8005ada:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d007      	beq.n	8005af8 <USBD_StdEPReq+0x30>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	f200 817f 	bhi.w	8005dec <USBD_StdEPReq+0x324>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02a      	beq.n	8005b48 <USBD_StdEPReq+0x80>
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	f040 817a 	bne.w	8005dec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005af8:	7bbb      	ldrb	r3, [r7, #14]
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fe83 	bl	8005808 <USBD_CoreFindEP>
 8005b02:	4603      	mov	r3, r0
 8005b04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b06:	7b7b      	ldrb	r3, [r7, #13]
 8005b08:	2bff      	cmp	r3, #255	; 0xff
 8005b0a:	f000 8174 	beq.w	8005df6 <USBD_StdEPReq+0x32e>
 8005b0e:	7b7b      	ldrb	r3, [r7, #13]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f040 8170 	bne.w	8005df6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005b16:	7b7a      	ldrb	r2, [r7, #13]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005b1e:	7b7a      	ldrb	r2, [r7, #13]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	32ae      	adds	r2, #174	; 0xae
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8163 	beq.w	8005df6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005b30:	7b7a      	ldrb	r2, [r7, #13]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	32ae      	adds	r2, #174	; 0xae
 8005b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b46:	e156      	b.n	8005df6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d008      	beq.n	8005b62 <USBD_StdEPReq+0x9a>
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	f300 8145 	bgt.w	8005de0 <USBD_StdEPReq+0x318>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 809b 	beq.w	8005c92 <USBD_StdEPReq+0x1ca>
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d03c      	beq.n	8005bda <USBD_StdEPReq+0x112>
 8005b60:	e13e      	b.n	8005de0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d002      	beq.n	8005b74 <USBD_StdEPReq+0xac>
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d016      	beq.n	8005ba0 <USBD_StdEPReq+0xd8>
 8005b72:	e02c      	b.n	8005bce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b74:	7bbb      	ldrb	r3, [r7, #14]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <USBD_StdEPReq+0xce>
 8005b7a:	7bbb      	ldrb	r3, [r7, #14]
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	d00a      	beq.n	8005b96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 f963 	bl	8006e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b8a:	2180      	movs	r1, #128	; 0x80
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f95f 	bl	8006e50 <USBD_LL_StallEP>
 8005b92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b94:	e020      	b.n	8005bd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fc7a 	bl	8006492 <USBD_CtlError>
              break;
 8005b9e:	e01b      	b.n	8005bd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	885b      	ldrh	r3, [r3, #2]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10e      	bne.n	8005bc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <USBD_StdEPReq+0xfe>
 8005bae:	7bbb      	ldrb	r3, [r7, #14]
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	d008      	beq.n	8005bc6 <USBD_StdEPReq+0xfe>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	88db      	ldrh	r3, [r3, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f945 	bl	8006e50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fd2e 	bl	8006628 <USBD_CtlSendStatus>

              break;
 8005bcc:	e004      	b.n	8005bd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fc5e 	bl	8006492 <USBD_CtlError>
              break;
 8005bd6:	bf00      	nop
          }
          break;
 8005bd8:	e107      	b.n	8005dea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d002      	beq.n	8005bec <USBD_StdEPReq+0x124>
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d016      	beq.n	8005c18 <USBD_StdEPReq+0x150>
 8005bea:	e04b      	b.n	8005c84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00d      	beq.n	8005c0e <USBD_StdEPReq+0x146>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d00a      	beq.n	8005c0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f927 	bl	8006e50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c02:	2180      	movs	r1, #128	; 0x80
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f923 	bl	8006e50 <USBD_LL_StallEP>
 8005c0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c0c:	e040      	b.n	8005c90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fc3e 	bl	8006492 <USBD_CtlError>
              break;
 8005c16:	e03b      	b.n	8005c90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	885b      	ldrh	r3, [r3, #2]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d136      	bne.n	8005c8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 f92d 	bl	8006e8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fcf7 	bl	8006628 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff fde2 	bl	8005808 <USBD_CoreFindEP>
 8005c44:	4603      	mov	r3, r0
 8005c46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c48:	7b7b      	ldrb	r3, [r7, #13]
 8005c4a:	2bff      	cmp	r3, #255	; 0xff
 8005c4c:	d01f      	beq.n	8005c8e <USBD_StdEPReq+0x1c6>
 8005c4e:	7b7b      	ldrb	r3, [r7, #13]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11c      	bne.n	8005c8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005c54:	7b7a      	ldrb	r2, [r7, #13]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005c5c:	7b7a      	ldrb	r2, [r7, #13]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	32ae      	adds	r2, #174	; 0xae
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d010      	beq.n	8005c8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c6c:	7b7a      	ldrb	r2, [r7, #13]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	32ae      	adds	r2, #174	; 0xae
 8005c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005c82:	e004      	b.n	8005c8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fc03 	bl	8006492 <USBD_CtlError>
              break;
 8005c8c:	e000      	b.n	8005c90 <USBD_StdEPReq+0x1c8>
              break;
 8005c8e:	bf00      	nop
          }
          break;
 8005c90:	e0ab      	b.n	8005dea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d002      	beq.n	8005ca4 <USBD_StdEPReq+0x1dc>
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d032      	beq.n	8005d08 <USBD_StdEPReq+0x240>
 8005ca2:	e097      	b.n	8005dd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <USBD_StdEPReq+0x1f2>
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	2b80      	cmp	r3, #128	; 0x80
 8005cae:	d004      	beq.n	8005cba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fbed 	bl	8006492 <USBD_CtlError>
                break;
 8005cb8:	e091      	b.n	8005dde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	da0b      	bge.n	8005cda <USBD_StdEPReq+0x212>
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	3310      	adds	r3, #16
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	e00b      	b.n	8005cf2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fc37 	bl	8006574 <USBD_CtlSendData>
              break;
 8005d06:	e06a      	b.n	8005dde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da11      	bge.n	8005d34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	f003 020f 	and.w	r2, r3, #15
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	3324      	adds	r3, #36	; 0x24
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d117      	bne.n	8005d5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fbb0 	bl	8006492 <USBD_CtlError>
                  break;
 8005d32:	e054      	b.n	8005dde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d34:	7bbb      	ldrb	r3, [r7, #14]
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d104      	bne.n	8005d5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fb9d 	bl	8006492 <USBD_CtlError>
                  break;
 8005d58:	e041      	b.n	8005dde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da0b      	bge.n	8005d7a <USBD_StdEPReq+0x2b2>
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	3310      	adds	r3, #16
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	3304      	adds	r3, #4
 8005d78:	e00b      	b.n	8005d92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
 8005d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <USBD_StdEPReq+0x2d8>
 8005d9a:	7bbb      	ldrb	r3, [r7, #14]
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d103      	bne.n	8005da8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e00e      	b.n	8005dc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f88d 	bl	8006ecc <USBD_LL_IsStallEP>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fbd1 	bl	8006574 <USBD_CtlSendData>
              break;
 8005dd2:	e004      	b.n	8005dde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fb5b 	bl	8006492 <USBD_CtlError>
              break;
 8005ddc:	bf00      	nop
          }
          break;
 8005dde:	e004      	b.n	8005dea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fb55 	bl	8006492 <USBD_CtlError>
          break;
 8005de8:	bf00      	nop
      }
      break;
 8005dea:	e005      	b.n	8005df8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fb4f 	bl	8006492 <USBD_CtlError>
      break;
 8005df4:	e000      	b.n	8005df8 <USBD_StdEPReq+0x330>
      break;
 8005df6:	bf00      	nop
  }

  return ret;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	885b      	ldrh	r3, [r3, #2]
 8005e1e:	0a1b      	lsrs	r3, r3, #8
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	2b06      	cmp	r3, #6
 8005e26:	f200 8128 	bhi.w	800607a <USBD_GetDescriptor+0x276>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <USBD_GetDescriptor+0x2c>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005ea5 	.word	0x08005ea5
 8005e3c:	0800607b 	.word	0x0800607b
 8005e40:	0800607b 	.word	0x0800607b
 8005e44:	0800601b 	.word	0x0800601b
 8005e48:	08006047 	.word	0x08006047
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	7c12      	ldrb	r2, [r2, #16]
 8005e58:	f107 0108 	add.w	r1, r7, #8
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	60f8      	str	r0, [r7, #12]
      break;
 8005e62:	e112      	b.n	800608a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	7c1b      	ldrb	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10d      	bne.n	8005e88 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	f107 0208 	add.w	r2, r7, #8
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
 8005e7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	2202      	movs	r2, #2
 8005e84:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e86:	e100      	b.n	800608a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	f107 0208 	add.w	r2, r7, #8
 8005e94:	4610      	mov	r0, r2
 8005e96:	4798      	blx	r3
 8005e98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	701a      	strb	r2, [r3, #0]
      break;
 8005ea2:	e0f2      	b.n	800608a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	885b      	ldrh	r3, [r3, #2]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	f200 80ac 	bhi.w	8006008 <USBD_GetDescriptor+0x204>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <USBD_GetDescriptor+0xb4>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005f05 	.word	0x08005f05
 8005ec0:	08005f39 	.word	0x08005f39
 8005ec4:	08005f6d 	.word	0x08005f6d
 8005ec8:	08005fa1 	.word	0x08005fa1
 8005ecc:	08005fd5 	.word	0x08005fd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	7c12      	ldrb	r2, [r2, #16]
 8005ee8:	f107 0108 	add.w	r1, r7, #8
 8005eec:	4610      	mov	r0, r2
 8005eee:	4798      	blx	r3
 8005ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ef2:	e091      	b.n	8006018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 facb 	bl	8006492 <USBD_CtlError>
            err++;
 8005efc:	7afb      	ldrb	r3, [r7, #11]
 8005efe:	3301      	adds	r3, #1
 8005f00:	72fb      	strb	r3, [r7, #11]
          break;
 8005f02:	e089      	b.n	8006018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	7c12      	ldrb	r2, [r2, #16]
 8005f1c:	f107 0108 	add.w	r1, r7, #8
 8005f20:	4610      	mov	r0, r2
 8005f22:	4798      	blx	r3
 8005f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f26:	e077      	b.n	8006018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fab1 	bl	8006492 <USBD_CtlError>
            err++;
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	3301      	adds	r3, #1
 8005f34:	72fb      	strb	r3, [r7, #11]
          break;
 8005f36:	e06f      	b.n	8006018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	7c12      	ldrb	r2, [r2, #16]
 8005f50:	f107 0108 	add.w	r1, r7, #8
 8005f54:	4610      	mov	r0, r2
 8005f56:	4798      	blx	r3
 8005f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f5a:	e05d      	b.n	8006018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa97 	bl	8006492 <USBD_CtlError>
            err++;
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	3301      	adds	r3, #1
 8005f68:	72fb      	strb	r3, [r7, #11]
          break;
 8005f6a:	e055      	b.n	8006018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	7c12      	ldrb	r2, [r2, #16]
 8005f84:	f107 0108 	add.w	r1, r7, #8
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4798      	blx	r3
 8005f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f8e:	e043      	b.n	8006018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa7d 	bl	8006492 <USBD_CtlError>
            err++;
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f9e:	e03b      	b.n	8006018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	7c12      	ldrb	r2, [r2, #16]
 8005fb8:	f107 0108 	add.w	r1, r7, #8
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
 8005fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fc2:	e029      	b.n	8006018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa63 	bl	8006492 <USBD_CtlError>
            err++;
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fd2:	e021      	b.n	8006018 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	7c12      	ldrb	r2, [r2, #16]
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff6:	e00f      	b.n	8006018 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa49 	bl	8006492 <USBD_CtlError>
            err++;
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	3301      	adds	r3, #1
 8006004:	72fb      	strb	r3, [r7, #11]
          break;
 8006006:	e007      	b.n	8006018 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa41 	bl	8006492 <USBD_CtlError>
          err++;
 8006010:	7afb      	ldrb	r3, [r7, #11]
 8006012:	3301      	adds	r3, #1
 8006014:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006016:	bf00      	nop
      }
      break;
 8006018:	e037      	b.n	800608a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7c1b      	ldrb	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	f107 0208 	add.w	r2, r7, #8
 800602e:	4610      	mov	r0, r2
 8006030:	4798      	blx	r3
 8006032:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006034:	e029      	b.n	800608a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fa2a 	bl	8006492 <USBD_CtlError>
        err++;
 800603e:	7afb      	ldrb	r3, [r7, #11]
 8006040:	3301      	adds	r3, #1
 8006042:	72fb      	strb	r3, [r7, #11]
      break;
 8006044:	e021      	b.n	800608a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	7c1b      	ldrb	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	f107 0208 	add.w	r2, r7, #8
 800605a:	4610      	mov	r0, r2
 800605c:	4798      	blx	r3
 800605e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3301      	adds	r3, #1
 8006064:	2207      	movs	r2, #7
 8006066:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006068:	e00f      	b.n	800608a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa10 	bl	8006492 <USBD_CtlError>
        err++;
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	3301      	adds	r3, #1
 8006076:	72fb      	strb	r3, [r7, #11]
      break;
 8006078:	e007      	b.n	800608a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa08 	bl	8006492 <USBD_CtlError>
      err++;
 8006082:	7afb      	ldrb	r3, [r7, #11]
 8006084:	3301      	adds	r3, #1
 8006086:	72fb      	strb	r3, [r7, #11]
      break;
 8006088:	bf00      	nop
  }

  if (err != 0U)
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d11e      	bne.n	80060ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	88db      	ldrh	r3, [r3, #6]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d016      	beq.n	80060c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006098:	893b      	ldrh	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00e      	beq.n	80060bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	88da      	ldrh	r2, [r3, #6]
 80060a2:	893b      	ldrh	r3, [r7, #8]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bf28      	it	cs
 80060a8:	4613      	movcs	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060ae:	893b      	ldrh	r3, [r7, #8]
 80060b0:	461a      	mov	r2, r3
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa5d 	bl	8006574 <USBD_CtlSendData>
 80060ba:	e009      	b.n	80060d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9e7 	bl	8006492 <USBD_CtlError>
 80060c4:	e004      	b.n	80060d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 faae 	bl	8006628 <USBD_CtlSendStatus>
 80060cc:	e000      	b.n	80060d0 <USBD_GetDescriptor+0x2cc>
    return;
 80060ce:	bf00      	nop
  }
}
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop

080060d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	889b      	ldrh	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d131      	bne.n	800614e <USBD_SetAddress+0x76>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	88db      	ldrh	r3, [r3, #6]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d12d      	bne.n	800614e <USBD_SetAddress+0x76>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	885b      	ldrh	r3, [r3, #2]
 80060f6:	2b7f      	cmp	r3, #127	; 0x7f
 80060f8:	d829      	bhi.n	800614e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	885b      	ldrh	r3, [r3, #2]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006104:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d104      	bne.n	800611c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9bc 	bl	8006492 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611a:	e01d      	b.n	8006158 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	7bfa      	ldrb	r2, [r7, #15]
 8006120:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fefb 	bl	8006f24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fa7a 	bl	8006628 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006142:	e009      	b.n	8006158 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614c:	e004      	b.n	8006158 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f99e 	bl	8006492 <USBD_CtlError>
  }
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	885b      	ldrh	r3, [r3, #2]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <USBD_SetConfig+0x150>)
 8006176:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006178:	4b4d      	ldr	r3, [pc, #308]	; (80062b0 <USBD_SetConfig+0x150>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d905      	bls.n	800618c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f985 	bl	8006492 <USBD_CtlError>
    return USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	e08c      	b.n	80062a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d002      	beq.n	800619e <USBD_SetConfig+0x3e>
 8006198:	2b03      	cmp	r3, #3
 800619a:	d029      	beq.n	80061f0 <USBD_SetConfig+0x90>
 800619c:	e075      	b.n	800628a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800619e:	4b44      	ldr	r3, [pc, #272]	; (80062b0 <USBD_SetConfig+0x150>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d020      	beq.n	80061e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80061a6:	4b42      	ldr	r3, [pc, #264]	; (80062b0 <USBD_SetConfig+0x150>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061b0:	4b3f      	ldr	r3, [pc, #252]	; (80062b0 <USBD_SetConfig+0x150>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fe ffe7 	bl	800518a <USBD_SetClassConfig>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f962 	bl	8006492 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061d6:	e065      	b.n	80062a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fa25 	bl	8006628 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2203      	movs	r2, #3
 80061e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061e6:	e05d      	b.n	80062a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fa1d 	bl	8006628 <USBD_CtlSendStatus>
      break;
 80061ee:	e059      	b.n	80062a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80061f0:	4b2f      	ldr	r3, [pc, #188]	; (80062b0 <USBD_SetConfig+0x150>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d112      	bne.n	800621e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006200:	4b2b      	ldr	r3, [pc, #172]	; (80062b0 <USBD_SetConfig+0x150>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800620a:	4b29      	ldr	r3, [pc, #164]	; (80062b0 <USBD_SetConfig+0x150>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7fe ffd6 	bl	80051c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa06 	bl	8006628 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800621c:	e042      	b.n	80062a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800621e:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <USBD_SetConfig+0x150>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d02a      	beq.n	8006282 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fe ffc4 	bl	80051c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800623a:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <USBD_SetConfig+0x150>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006244:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <USBD_SetConfig+0x150>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fe ff9d 	bl	800518a <USBD_SetClassConfig>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00f      	beq.n	800627a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f918 	bl	8006492 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fe ffa9 	bl	80051c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006278:	e014      	b.n	80062a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f9d4 	bl	8006628 <USBD_CtlSendStatus>
      break;
 8006280:	e010      	b.n	80062a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9d0 	bl	8006628 <USBD_CtlSendStatus>
      break;
 8006288:	e00c      	b.n	80062a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f900 	bl	8006492 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <USBD_SetConfig+0x150>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fe ff92 	bl	80051c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800629e:	2303      	movs	r3, #3
 80062a0:	73fb      	strb	r3, [r7, #15]
      break;
 80062a2:	bf00      	nop
  }

  return ret;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2000017c 	.word	0x2000017c

080062b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	88db      	ldrh	r3, [r3, #6]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d004      	beq.n	80062d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f8e2 	bl	8006492 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062ce:	e023      	b.n	8006318 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	dc02      	bgt.n	80062e2 <USBD_GetConfig+0x2e>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dc03      	bgt.n	80062e8 <USBD_GetConfig+0x34>
 80062e0:	e015      	b.n	800630e <USBD_GetConfig+0x5a>
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d00b      	beq.n	80062fe <USBD_GetConfig+0x4a>
 80062e6:	e012      	b.n	800630e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3308      	adds	r3, #8
 80062f2:	2201      	movs	r2, #1
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f93c 	bl	8006574 <USBD_CtlSendData>
        break;
 80062fc:	e00c      	b.n	8006318 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	2201      	movs	r2, #1
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f934 	bl	8006574 <USBD_CtlSendData>
        break;
 800630c:	e004      	b.n	8006318 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f8be 	bl	8006492 <USBD_CtlError>
        break;
 8006316:	bf00      	nop
}
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	b2db      	uxtb	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	2b02      	cmp	r3, #2
 8006336:	d81e      	bhi.n	8006376 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	88db      	ldrh	r3, [r3, #6]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d004      	beq.n	800634a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8a5 	bl	8006492 <USBD_CtlError>
        break;
 8006348:	e01a      	b.n	8006380 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f043 0202 	orr.w	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	330c      	adds	r3, #12
 800636a:	2202      	movs	r2, #2
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f900 	bl	8006574 <USBD_CtlSendData>
      break;
 8006374:	e004      	b.n	8006380 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f88a 	bl	8006492 <USBD_CtlError>
      break;
 800637e:	bf00      	nop
  }
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d107      	bne.n	80063aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f940 	bl	8006628 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80063a8:	e013      	b.n	80063d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	885b      	ldrh	r3, [r3, #2]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d10b      	bne.n	80063ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	889b      	ldrh	r3, [r3, #4]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f930 	bl	8006628 <USBD_CtlSendStatus>
}
 80063c8:	e003      	b.n	80063d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f860 	bl	8006492 <USBD_CtlError>
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d80b      	bhi.n	800640a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d10c      	bne.n	8006414 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f910 	bl	8006628 <USBD_CtlSendStatus>
      }
      break;
 8006408:	e004      	b.n	8006414 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f840 	bl	8006492 <USBD_CtlError>
      break;
 8006412:	e000      	b.n	8006416 <USBD_ClrFeature+0x3c>
      break;
 8006414:	bf00      	nop
  }
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	781a      	ldrb	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3301      	adds	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f7ff fa41 	bl	80058d0 <SWAPBYTE>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f7ff fa34 	bl	80058d0 <SWAPBYTE>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fa27 	bl	80058d0 <SWAPBYTE>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	80da      	strh	r2, [r3, #6]
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800649c:	2180      	movs	r1, #128	; 0x80
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fcd6 	bl	8006e50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064a4:	2100      	movs	r1, #0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fcd2 	bl	8006e50 <USBD_LL_StallEP>
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d036      	beq.n	8006538 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80064ce:	6938      	ldr	r0, [r7, #16]
 80064d0:	f000 f836 	bl	8006540 <USBD_GetLen>
 80064d4:	4603      	mov	r3, r0
 80064d6:	3301      	adds	r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	4413      	add	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	3301      	adds	r3, #1
 80064f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4413      	add	r3, r2
 80064fa:	2203      	movs	r2, #3
 80064fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	3301      	adds	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006504:	e013      	b.n	800652e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	4413      	add	r3, r2
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	7812      	ldrb	r2, [r2, #0]
 8006510:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	3301      	adds	r3, #1
 8006516:	613b      	str	r3, [r7, #16]
    idx++;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	3301      	adds	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	4413      	add	r3, r2
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
    idx++;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	3301      	adds	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e7      	bne.n	8006506 <USBD_GetString+0x52>
 8006536:	e000      	b.n	800653a <USBD_GetString+0x86>
    return;
 8006538:	bf00      	nop
  }
}
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006550:	e005      	b.n	800655e <USBD_GetLen+0x1e>
  {
    len++;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	3301      	adds	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	3301      	adds	r3, #1
 800655c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f5      	bne.n	8006552 <USBD_GetLen+0x12>
  }

  return len;
 8006566:	7bfb      	ldrb	r3, [r7, #15]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2202      	movs	r2, #2
 8006584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	2100      	movs	r1, #0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fce1 	bl	8006f62 <USBD_LL_Transmit>

  return USBD_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	2100      	movs	r1, #0
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fcd0 	bl	8006f62 <USBD_LL_Transmit>

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2203      	movs	r2, #3
 80065dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	2100      	movs	r1, #0
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fcd4 	bl	8006fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	2100      	movs	r1, #0
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fcc3 	bl	8006fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006638:	2300      	movs	r3, #0
 800663a:	2200      	movs	r2, #0
 800663c:	2100      	movs	r1, #0
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc8f 	bl	8006f62 <USBD_LL_Transmit>

  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2205      	movs	r2, #5
 800665a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800665e:	2300      	movs	r3, #0
 8006660:	2200      	movs	r2, #0
 8006662:	2100      	movs	r1, #0
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fc9d 	bl	8006fa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006678:	2200      	movs	r2, #0
 800667a:	4912      	ldr	r1, [pc, #72]	; (80066c4 <MX_USB_DEVICE_Init+0x50>)
 800667c:	4812      	ldr	r0, [pc, #72]	; (80066c8 <MX_USB_DEVICE_Init+0x54>)
 800667e:	f7fe fd07 	bl	8005090 <USBD_Init>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006688:	f7fa f898 	bl	80007bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800668c:	490f      	ldr	r1, [pc, #60]	; (80066cc <MX_USB_DEVICE_Init+0x58>)
 800668e:	480e      	ldr	r0, [pc, #56]	; (80066c8 <MX_USB_DEVICE_Init+0x54>)
 8006690:	f7fe fd2e 	bl	80050f0 <USBD_RegisterClass>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800669a:	f7fa f88f 	bl	80007bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800669e:	490c      	ldr	r1, [pc, #48]	; (80066d0 <MX_USB_DEVICE_Init+0x5c>)
 80066a0:	4809      	ldr	r0, [pc, #36]	; (80066c8 <MX_USB_DEVICE_Init+0x54>)
 80066a2:	f7fe fc1f 	bl	8004ee4 <USBD_CDC_RegisterInterface>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80066ac:	f7fa f886 	bl	80007bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066b0:	4805      	ldr	r0, [pc, #20]	; (80066c8 <MX_USB_DEVICE_Init+0x54>)
 80066b2:	f7fe fd53 	bl	800515c <USBD_Start>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80066bc:	f7fa f87e 	bl	80007bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200000ac 	.word	0x200000ac
 80066c8:	20000180 	.word	0x20000180
 80066cc:	20000018 	.word	0x20000018
 80066d0:	20000098 	.word	0x20000098

080066d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80066d8:	2200      	movs	r2, #0
 80066da:	4905      	ldr	r1, [pc, #20]	; (80066f0 <CDC_Init_FS+0x1c>)
 80066dc:	4805      	ldr	r0, [pc, #20]	; (80066f4 <CDC_Init_FS+0x20>)
 80066de:	f7fe fc1b 	bl	8004f18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066e2:	4905      	ldr	r1, [pc, #20]	; (80066f8 <CDC_Init_FS+0x24>)
 80066e4:	4803      	ldr	r0, [pc, #12]	; (80066f4 <CDC_Init_FS+0x20>)
 80066e6:	f7fe fc39 	bl	8004f5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000c5c 	.word	0x20000c5c
 80066f4:	20000180 	.word	0x20000180
 80066f8:	2000045c 	.word	0x2000045c

080066fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006700:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006702:	4618      	mov	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	6039      	str	r1, [r7, #0]
 8006716:	71fb      	strb	r3, [r7, #7]
 8006718:	4613      	mov	r3, r2
 800671a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	2b23      	cmp	r3, #35	; 0x23
 8006720:	d84a      	bhi.n	80067b8 <CDC_Control_FS+0xac>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <CDC_Control_FS+0x1c>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	080067b9 	.word	0x080067b9
 800672c:	080067b9 	.word	0x080067b9
 8006730:	080067b9 	.word	0x080067b9
 8006734:	080067b9 	.word	0x080067b9
 8006738:	080067b9 	.word	0x080067b9
 800673c:	080067b9 	.word	0x080067b9
 8006740:	080067b9 	.word	0x080067b9
 8006744:	080067b9 	.word	0x080067b9
 8006748:	080067b9 	.word	0x080067b9
 800674c:	080067b9 	.word	0x080067b9
 8006750:	080067b9 	.word	0x080067b9
 8006754:	080067b9 	.word	0x080067b9
 8006758:	080067b9 	.word	0x080067b9
 800675c:	080067b9 	.word	0x080067b9
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067b9 	.word	0x080067b9
 8006768:	080067b9 	.word	0x080067b9
 800676c:	080067b9 	.word	0x080067b9
 8006770:	080067b9 	.word	0x080067b9
 8006774:	080067b9 	.word	0x080067b9
 8006778:	080067b9 	.word	0x080067b9
 800677c:	080067b9 	.word	0x080067b9
 8006780:	080067b9 	.word	0x080067b9
 8006784:	080067b9 	.word	0x080067b9
 8006788:	080067b9 	.word	0x080067b9
 800678c:	080067b9 	.word	0x080067b9
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067b9 	.word	0x080067b9
 800679c:	080067b9 	.word	0x080067b9
 80067a0:	080067b9 	.word	0x080067b9
 80067a4:	080067b9 	.word	0x080067b9
 80067a8:	080067b9 	.word	0x080067b9
 80067ac:	080067b9 	.word	0x080067b9
 80067b0:	080067b9 	.word	0x080067b9
 80067b4:	080067b9 	.word	0x080067b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80067b8:	bf00      	nop
  }

  return (USBD_OK);
 80067ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4805      	ldr	r0, [pc, #20]	; (80067ec <CDC_Receive_FS+0x24>)
 80067d6:	f7fe fbc1 	bl	8004f5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067da:	4804      	ldr	r0, [pc, #16]	; (80067ec <CDC_Receive_FS+0x24>)
 80067dc:	f7fe fc22 	bl	8005024 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80067e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000180 	.word	0x20000180

080067f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <CDC_Transmit_FS+0x48>)
 8006802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006806:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006812:	2301      	movs	r3, #1
 8006814:	e00b      	b.n	800682e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006816:	887b      	ldrh	r3, [r7, #2]
 8006818:	461a      	mov	r2, r3
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4806      	ldr	r0, [pc, #24]	; (8006838 <CDC_Transmit_FS+0x48>)
 800681e:	f7fe fb7b 	bl	8004f18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006822:	4805      	ldr	r0, [pc, #20]	; (8006838 <CDC_Transmit_FS+0x48>)
 8006824:	f7fe fbb8 	bl	8004f98 <USBD_CDC_TransmitPacket>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000180 	.word	0x20000180

0800683c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800684e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006852:	4618      	mov	r0, r3
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	6039      	str	r1, [r7, #0]
 800686a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2212      	movs	r2, #18
 8006870:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006872:	4b03      	ldr	r3, [pc, #12]	; (8006880 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	200000c8 	.word	0x200000c8

08006884 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2204      	movs	r2, #4
 8006894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006896:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	200000dc 	.word	0x200000dc

080068a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d105      	bne.n	80068c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	4907      	ldr	r1, [pc, #28]	; (80068dc <USBD_FS_ProductStrDescriptor+0x34>)
 80068be:	4808      	ldr	r0, [pc, #32]	; (80068e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80068c0:	f7ff fdf8 	bl	80064b4 <USBD_GetString>
 80068c4:	e004      	b.n	80068d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	4904      	ldr	r1, [pc, #16]	; (80068dc <USBD_FS_ProductStrDescriptor+0x34>)
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80068cc:	f7ff fdf2 	bl	80064b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	2000145c 	.word	0x2000145c
 80068e0:	08007a38 	.word	0x08007a38

080068e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	4603      	mov	r3, r0
 80068ec:	6039      	str	r1, [r7, #0]
 80068ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	4904      	ldr	r1, [pc, #16]	; (8006904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068f4:	4804      	ldr	r0, [pc, #16]	; (8006908 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068f6:	f7ff fddd 	bl	80064b4 <USBD_GetString>
  return USBD_StrDesc;
 80068fa:	4b02      	ldr	r3, [pc, #8]	; (8006904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	2000145c 	.word	0x2000145c
 8006908:	08007a50 	.word	0x08007a50

0800690c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	6039      	str	r1, [r7, #0]
 8006916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	221a      	movs	r2, #26
 800691c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800691e:	f000 f843 	bl	80069a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006922:	4b02      	ldr	r3, [pc, #8]	; (800692c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200000e0 	.word	0x200000e0

08006930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4907      	ldr	r1, [pc, #28]	; (8006964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006946:	4808      	ldr	r0, [pc, #32]	; (8006968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006948:	f7ff fdb4 	bl	80064b4 <USBD_GetString>
 800694c:	e004      	b.n	8006958 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4904      	ldr	r1, [pc, #16]	; (8006964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006952:	4805      	ldr	r0, [pc, #20]	; (8006968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006954:	f7ff fdae 	bl	80064b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006958:	4b02      	ldr	r3, [pc, #8]	; (8006964 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	2000145c 	.word	0x2000145c
 8006968:	08007a64 	.word	0x08007a64

0800696c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d105      	bne.n	800698a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	4907      	ldr	r1, [pc, #28]	; (80069a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006982:	4808      	ldr	r0, [pc, #32]	; (80069a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006984:	f7ff fd96 	bl	80064b4 <USBD_GetString>
 8006988:	e004      	b.n	8006994 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	4904      	ldr	r1, [pc, #16]	; (80069a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800698e:	4805      	ldr	r0, [pc, #20]	; (80069a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006990:	f7ff fd90 	bl	80064b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006994:	4b02      	ldr	r3, [pc, #8]	; (80069a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	2000145c 	.word	0x2000145c
 80069a4:	08007a70 	.word	0x08007a70

080069a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069ae:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <Get_SerialNum+0x44>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80069b4:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <Get_SerialNum+0x48>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069ba:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <Get_SerialNum+0x4c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4413      	add	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069ce:	2208      	movs	r2, #8
 80069d0:	4909      	ldr	r1, [pc, #36]	; (80069f8 <Get_SerialNum+0x50>)
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f814 	bl	8006a00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069d8:	2204      	movs	r2, #4
 80069da:	4908      	ldr	r1, [pc, #32]	; (80069fc <Get_SerialNum+0x54>)
 80069dc:	68b8      	ldr	r0, [r7, #8]
 80069de:	f000 f80f 	bl	8006a00 <IntToUnicode>
  }
}
 80069e2:	bf00      	nop
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	1fff7a10 	.word	0x1fff7a10
 80069f0:	1fff7a14 	.word	0x1fff7a14
 80069f4:	1fff7a18 	.word	0x1fff7a18
 80069f8:	200000e2 	.word	0x200000e2
 80069fc:	200000f2 	.word	0x200000f2

08006a00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]
 8006a16:	e027      	b.n	8006a68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	0f1b      	lsrs	r3, r3, #28
 8006a1c:	2b09      	cmp	r3, #9
 8006a1e:	d80b      	bhi.n	8006a38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	0f1b      	lsrs	r3, r3, #28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	440b      	add	r3, r1
 8006a30:	3230      	adds	r2, #48	; 0x30
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	e00a      	b.n	8006a4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	0f1b      	lsrs	r3, r3, #28
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4619      	mov	r1, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	440b      	add	r3, r1
 8006a48:	3237      	adds	r2, #55	; 0x37
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	3301      	adds	r3, #1
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	3301      	adds	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
 8006a68:	7dfa      	ldrb	r2, [r7, #23]
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d3d3      	bcc.n	8006a18 <IntToUnicode+0x18>
  }
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	; 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aa0:	d13a      	bne.n	8006b18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	4b1e      	ldr	r3, [pc, #120]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006aac:	f043 0301 	orr.w	r3, r3, #1
 8006ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006abe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006acc:	2303      	movs	r3, #3
 8006ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ad0:	230a      	movs	r3, #10
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ad4:	f107 0314 	add.w	r3, r7, #20
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4812      	ldr	r0, [pc, #72]	; (8006b24 <HAL_PCD_MspInit+0xa4>)
 8006adc:	f7fa f96a 	bl	8000db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	4a0e      	ldr	r2, [pc, #56]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aea:	6353      	str	r3, [r2, #52]	; 0x34
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af4:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006afa:	6453      	str	r3, [r2, #68]	; 0x44
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <HAL_PCD_MspInit+0xa0>)
 8006afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	2043      	movs	r0, #67	; 0x43
 8006b0e:	f7fa f91a 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b12:	2043      	movs	r0, #67	; 0x43
 8006b14:	f7fa f933 	bl	8000d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b18:	bf00      	nop
 8006b1a:	3728      	adds	r7, #40	; 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40023800 	.word	0x40023800
 8006b24:	40020000 	.word	0x40020000

08006b28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7fe fb59 	bl	80051f6 <USBD_LL_SetupStage>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006b5e:	78fa      	ldrb	r2, [r7, #3]
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	78fb      	ldrb	r3, [r7, #3]
 8006b74:	4619      	mov	r1, r3
 8006b76:	f7fe fb93 	bl	80052a0 <USBD_LL_DataOutStage>
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	334c      	adds	r3, #76	; 0x4c
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f7fe fc2c 	bl	8005406 <USBD_LL_DataInStage>
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fd60 	bl	800568a <USBD_LL_SOF>
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d001      	beq.n	8006bea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006be6:	f7f9 fde9 	bl	80007bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bf0:	7bfa      	ldrb	r2, [r7, #15]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fd0a 	bl	800560e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe fcb2 	bl	800556a <USBD_LL_Reset>
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fd05 	bl	800562e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c44:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <HAL_PCD_SuspendCallback+0x48>)
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	4a03      	ldr	r2, [pc, #12]	; (8006c58 <HAL_PCD_SuspendCallback+0x48>)
 8006c4a:	f043 0306 	orr.w	r3, r3, #6
 8006c4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	e000ed00 	.word	0xe000ed00

08006c5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fcf5 	bl	800565a <USBD_LL_Resume>
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe fd4d 	bl	800572e <USBD_LL_IsoOUTIncomplete>
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fd09 	bl	80056ca <USBD_LL_IsoINIncomplete>
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fd5f 	bl	8005792 <USBD_LL_DevConnected>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fd5c 	bl	80057a8 <USBD_LL_DevDisconnected>
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d13c      	bne.n	8006d82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d08:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d18:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d20:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d22:	2204      	movs	r2, #4
 8006d24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d26:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d28:	2202      	movs	r2, #2
 8006d2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d2c:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d32:	4b16      	ldr	r3, [pc, #88]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d34:	2202      	movs	r2, #2
 8006d36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d38:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d44:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d4a:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d50:	4b0e      	ldr	r3, [pc, #56]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d56:	480d      	ldr	r0, [pc, #52]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d58:	f7fa f9c8 	bl	80010ec <HAL_PCD_Init>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d62:	f7f9 fd2b 	bl	80007bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d66:	2180      	movs	r1, #128	; 0x80
 8006d68:	4808      	ldr	r0, [pc, #32]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d6a:	f7fb fc20 	bl	80025ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d6e:	2240      	movs	r2, #64	; 0x40
 8006d70:	2100      	movs	r1, #0
 8006d72:	4806      	ldr	r0, [pc, #24]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d74:	f7fb fbd4 	bl	8002520 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d78:	2280      	movs	r2, #128	; 0x80
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	4803      	ldr	r0, [pc, #12]	; (8006d8c <USBD_LL_Init+0x94>)
 8006d7e:	f7fb fbcf 	bl	8002520 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	2000165c 	.word	0x2000165c

08006d90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fa fabd 	bl	8001326 <HAL_PCD_Start>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f942 	bl	800703c <USBD_Get_USB_Status>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	70fb      	strb	r3, [r7, #3]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70bb      	strb	r3, [r7, #2]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006dee:	78bb      	ldrb	r3, [r7, #2]
 8006df0:	883a      	ldrh	r2, [r7, #0]
 8006df2:	78f9      	ldrb	r1, [r7, #3]
 8006df4:	f7fa ff8e 	bl	8001d14 <HAL_PCD_EP_Open>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f91c 	bl	800703c <USBD_Get_USB_Status>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fa ffd7 	bl	8001de4 <HAL_PCD_EP_Close>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 f8fd 	bl	800703c <USBD_Get_USB_Status>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fb f8af 	bl	8001fd2 <HAL_PCD_EP_SetStall>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f8de 	bl	800703c <USBD_Get_USB_Status>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	4611      	mov	r1, r2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fb f8f4 	bl	800209a <HAL_PCD_EP_ClrStall>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 f8bf 	bl	800703c <USBD_Get_USB_Status>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ede:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da0b      	bge.n	8006f00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	333e      	adds	r3, #62	; 0x3e
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	e00b      	b.n	8006f18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fa fec1 	bl	8001cca <HAL_PCD_SetAddress>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 f874 	bl	800703c <USBD_Get_USB_Status>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f80:	7af9      	ldrb	r1, [r7, #11]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	f7fa ffda 	bl	8001f3e <HAL_PCD_EP_Transmit>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 f853 	bl	800703c <USBD_Get_USB_Status>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006fc2:	7af9      	ldrb	r1, [r7, #11]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	f7fa ff56 	bl	8001e78 <HAL_PCD_EP_Receive>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 f832 	bl	800703c <USBD_Get_USB_Status>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fa ff86 	bl	8001f0e <HAL_PCD_EP_GetRxCount>
 8007002:	4603      	mov	r3, r0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007014:	4b03      	ldr	r3, [pc, #12]	; (8007024 <USBD_static_malloc+0x18>)
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20001b68 	.word	0x20001b68

08007028 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]

}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d817      	bhi.n	8007080 <USBD_Get_USB_Status+0x44>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <USBD_Get_USB_Status+0x1c>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	08007069 	.word	0x08007069
 800705c:	0800706f 	.word	0x0800706f
 8007060:	08007075 	.word	0x08007075
 8007064:	0800707b 	.word	0x0800707b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
    break;
 800706c:	e00b      	b.n	8007086 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800706e:	2303      	movs	r3, #3
 8007070:	73fb      	strb	r3, [r7, #15]
    break;
 8007072:	e008      	b.n	8007086 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007074:	2301      	movs	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
    break;
 8007078:	e005      	b.n	8007086 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800707a:	2303      	movs	r3, #3
 800707c:	73fb      	strb	r3, [r7, #15]
    break;
 800707e:	e002      	b.n	8007086 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	73fb      	strb	r3, [r7, #15]
    break;
 8007084:	bf00      	nop
  }
  return usb_status;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <std>:
 8007094:	2300      	movs	r3, #0
 8007096:	b510      	push	{r4, lr}
 8007098:	4604      	mov	r4, r0
 800709a:	e9c0 3300 	strd	r3, r3, [r0]
 800709e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070a2:	6083      	str	r3, [r0, #8]
 80070a4:	8181      	strh	r1, [r0, #12]
 80070a6:	6643      	str	r3, [r0, #100]	; 0x64
 80070a8:	81c2      	strh	r2, [r0, #14]
 80070aa:	6183      	str	r3, [r0, #24]
 80070ac:	4619      	mov	r1, r3
 80070ae:	2208      	movs	r2, #8
 80070b0:	305c      	adds	r0, #92	; 0x5c
 80070b2:	f000 f9e5 	bl	8007480 <memset>
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <std+0x58>)
 80070b8:	6263      	str	r3, [r4, #36]	; 0x24
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <std+0x5c>)
 80070bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <std+0x60>)
 80070c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <std+0x64>)
 80070c4:	6323      	str	r3, [r4, #48]	; 0x30
 80070c6:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <std+0x68>)
 80070c8:	6224      	str	r4, [r4, #32]
 80070ca:	429c      	cmp	r4, r3
 80070cc:	d006      	beq.n	80070dc <std+0x48>
 80070ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070d2:	4294      	cmp	r4, r2
 80070d4:	d002      	beq.n	80070dc <std+0x48>
 80070d6:	33d0      	adds	r3, #208	; 0xd0
 80070d8:	429c      	cmp	r4, r3
 80070da:	d105      	bne.n	80070e8 <std+0x54>
 80070dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e4:	f000 ba44 	b.w	8007570 <__retarget_lock_init_recursive>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	bf00      	nop
 80070ec:	080072d1 	.word	0x080072d1
 80070f0:	080072f3 	.word	0x080072f3
 80070f4:	0800732b 	.word	0x0800732b
 80070f8:	0800734f 	.word	0x0800734f
 80070fc:	20001d88 	.word	0x20001d88

08007100 <stdio_exit_handler>:
 8007100:	4a02      	ldr	r2, [pc, #8]	; (800710c <stdio_exit_handler+0xc>)
 8007102:	4903      	ldr	r1, [pc, #12]	; (8007110 <stdio_exit_handler+0x10>)
 8007104:	4803      	ldr	r0, [pc, #12]	; (8007114 <stdio_exit_handler+0x14>)
 8007106:	f000 b869 	b.w	80071dc <_fwalk_sglue>
 800710a:	bf00      	nop
 800710c:	200000fc 	.word	0x200000fc
 8007110:	08007875 	.word	0x08007875
 8007114:	20000108 	.word	0x20000108

08007118 <cleanup_stdio>:
 8007118:	6841      	ldr	r1, [r0, #4]
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <cleanup_stdio+0x34>)
 800711c:	4299      	cmp	r1, r3
 800711e:	b510      	push	{r4, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	d001      	beq.n	8007128 <cleanup_stdio+0x10>
 8007124:	f000 fba6 	bl	8007874 <_fflush_r>
 8007128:	68a1      	ldr	r1, [r4, #8]
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <cleanup_stdio+0x38>)
 800712c:	4299      	cmp	r1, r3
 800712e:	d002      	beq.n	8007136 <cleanup_stdio+0x1e>
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fb9f 	bl	8007874 <_fflush_r>
 8007136:	68e1      	ldr	r1, [r4, #12]
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <cleanup_stdio+0x3c>)
 800713a:	4299      	cmp	r1, r3
 800713c:	d004      	beq.n	8007148 <cleanup_stdio+0x30>
 800713e:	4620      	mov	r0, r4
 8007140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007144:	f000 bb96 	b.w	8007874 <_fflush_r>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	20001d88 	.word	0x20001d88
 8007150:	20001df0 	.word	0x20001df0
 8007154:	20001e58 	.word	0x20001e58

08007158 <global_stdio_init.part.0>:
 8007158:	b510      	push	{r4, lr}
 800715a:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <global_stdio_init.part.0+0x30>)
 800715c:	4c0b      	ldr	r4, [pc, #44]	; (800718c <global_stdio_init.part.0+0x34>)
 800715e:	4a0c      	ldr	r2, [pc, #48]	; (8007190 <global_stdio_init.part.0+0x38>)
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	4620      	mov	r0, r4
 8007164:	2200      	movs	r2, #0
 8007166:	2104      	movs	r1, #4
 8007168:	f7ff ff94 	bl	8007094 <std>
 800716c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007170:	2201      	movs	r2, #1
 8007172:	2109      	movs	r1, #9
 8007174:	f7ff ff8e 	bl	8007094 <std>
 8007178:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800717c:	2202      	movs	r2, #2
 800717e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007182:	2112      	movs	r1, #18
 8007184:	f7ff bf86 	b.w	8007094 <std>
 8007188:	20001ec0 	.word	0x20001ec0
 800718c:	20001d88 	.word	0x20001d88
 8007190:	08007101 	.word	0x08007101

08007194 <__sfp_lock_acquire>:
 8007194:	4801      	ldr	r0, [pc, #4]	; (800719c <__sfp_lock_acquire+0x8>)
 8007196:	f000 b9ec 	b.w	8007572 <__retarget_lock_acquire_recursive>
 800719a:	bf00      	nop
 800719c:	20001ec9 	.word	0x20001ec9

080071a0 <__sfp_lock_release>:
 80071a0:	4801      	ldr	r0, [pc, #4]	; (80071a8 <__sfp_lock_release+0x8>)
 80071a2:	f000 b9e7 	b.w	8007574 <__retarget_lock_release_recursive>
 80071a6:	bf00      	nop
 80071a8:	20001ec9 	.word	0x20001ec9

080071ac <__sinit>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	4604      	mov	r4, r0
 80071b0:	f7ff fff0 	bl	8007194 <__sfp_lock_acquire>
 80071b4:	6a23      	ldr	r3, [r4, #32]
 80071b6:	b11b      	cbz	r3, 80071c0 <__sinit+0x14>
 80071b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071bc:	f7ff bff0 	b.w	80071a0 <__sfp_lock_release>
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <__sinit+0x28>)
 80071c2:	6223      	str	r3, [r4, #32]
 80071c4:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <__sinit+0x2c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1f5      	bne.n	80071b8 <__sinit+0xc>
 80071cc:	f7ff ffc4 	bl	8007158 <global_stdio_init.part.0>
 80071d0:	e7f2      	b.n	80071b8 <__sinit+0xc>
 80071d2:	bf00      	nop
 80071d4:	08007119 	.word	0x08007119
 80071d8:	20001ec0 	.word	0x20001ec0

080071dc <_fwalk_sglue>:
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	4607      	mov	r7, r0
 80071e2:	4688      	mov	r8, r1
 80071e4:	4614      	mov	r4, r2
 80071e6:	2600      	movs	r6, #0
 80071e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071ec:	f1b9 0901 	subs.w	r9, r9, #1
 80071f0:	d505      	bpl.n	80071fe <_fwalk_sglue+0x22>
 80071f2:	6824      	ldr	r4, [r4, #0]
 80071f4:	2c00      	cmp	r4, #0
 80071f6:	d1f7      	bne.n	80071e8 <_fwalk_sglue+0xc>
 80071f8:	4630      	mov	r0, r6
 80071fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d907      	bls.n	8007214 <_fwalk_sglue+0x38>
 8007204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007208:	3301      	adds	r3, #1
 800720a:	d003      	beq.n	8007214 <_fwalk_sglue+0x38>
 800720c:	4629      	mov	r1, r5
 800720e:	4638      	mov	r0, r7
 8007210:	47c0      	blx	r8
 8007212:	4306      	orrs	r6, r0
 8007214:	3568      	adds	r5, #104	; 0x68
 8007216:	e7e9      	b.n	80071ec <_fwalk_sglue+0x10>

08007218 <_puts_r>:
 8007218:	6a03      	ldr	r3, [r0, #32]
 800721a:	b570      	push	{r4, r5, r6, lr}
 800721c:	6884      	ldr	r4, [r0, #8]
 800721e:	4605      	mov	r5, r0
 8007220:	460e      	mov	r6, r1
 8007222:	b90b      	cbnz	r3, 8007228 <_puts_r+0x10>
 8007224:	f7ff ffc2 	bl	80071ac <__sinit>
 8007228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800722a:	07db      	lsls	r3, r3, #31
 800722c:	d405      	bmi.n	800723a <_puts_r+0x22>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	0598      	lsls	r0, r3, #22
 8007232:	d402      	bmi.n	800723a <_puts_r+0x22>
 8007234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007236:	f000 f99c 	bl	8007572 <__retarget_lock_acquire_recursive>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	0719      	lsls	r1, r3, #28
 800723e:	d513      	bpl.n	8007268 <_puts_r+0x50>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	b18b      	cbz	r3, 8007268 <_puts_r+0x50>
 8007244:	3e01      	subs	r6, #1
 8007246:	68a3      	ldr	r3, [r4, #8]
 8007248:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800724c:	3b01      	subs	r3, #1
 800724e:	60a3      	str	r3, [r4, #8]
 8007250:	b9e9      	cbnz	r1, 800728e <_puts_r+0x76>
 8007252:	2b00      	cmp	r3, #0
 8007254:	da2e      	bge.n	80072b4 <_puts_r+0x9c>
 8007256:	4622      	mov	r2, r4
 8007258:	210a      	movs	r1, #10
 800725a:	4628      	mov	r0, r5
 800725c:	f000 f87b 	bl	8007356 <__swbuf_r>
 8007260:	3001      	adds	r0, #1
 8007262:	d007      	beq.n	8007274 <_puts_r+0x5c>
 8007264:	250a      	movs	r5, #10
 8007266:	e007      	b.n	8007278 <_puts_r+0x60>
 8007268:	4621      	mov	r1, r4
 800726a:	4628      	mov	r0, r5
 800726c:	f000 f8b0 	bl	80073d0 <__swsetup_r>
 8007270:	2800      	cmp	r0, #0
 8007272:	d0e7      	beq.n	8007244 <_puts_r+0x2c>
 8007274:	f04f 35ff 	mov.w	r5, #4294967295
 8007278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800727a:	07da      	lsls	r2, r3, #31
 800727c:	d405      	bmi.n	800728a <_puts_r+0x72>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	059b      	lsls	r3, r3, #22
 8007282:	d402      	bmi.n	800728a <_puts_r+0x72>
 8007284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007286:	f000 f975 	bl	8007574 <__retarget_lock_release_recursive>
 800728a:	4628      	mov	r0, r5
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	2b00      	cmp	r3, #0
 8007290:	da04      	bge.n	800729c <_puts_r+0x84>
 8007292:	69a2      	ldr	r2, [r4, #24]
 8007294:	429a      	cmp	r2, r3
 8007296:	dc06      	bgt.n	80072a6 <_puts_r+0x8e>
 8007298:	290a      	cmp	r1, #10
 800729a:	d004      	beq.n	80072a6 <_puts_r+0x8e>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	6022      	str	r2, [r4, #0]
 80072a2:	7019      	strb	r1, [r3, #0]
 80072a4:	e7cf      	b.n	8007246 <_puts_r+0x2e>
 80072a6:	4622      	mov	r2, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 f854 	bl	8007356 <__swbuf_r>
 80072ae:	3001      	adds	r0, #1
 80072b0:	d1c9      	bne.n	8007246 <_puts_r+0x2e>
 80072b2:	e7df      	b.n	8007274 <_puts_r+0x5c>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	250a      	movs	r5, #10
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	6022      	str	r2, [r4, #0]
 80072bc:	701d      	strb	r5, [r3, #0]
 80072be:	e7db      	b.n	8007278 <_puts_r+0x60>

080072c0 <puts>:
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <puts+0xc>)
 80072c2:	4601      	mov	r1, r0
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	f7ff bfa7 	b.w	8007218 <_puts_r>
 80072ca:	bf00      	nop
 80072cc:	20000154 	.word	0x20000154

080072d0 <__sread>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	460c      	mov	r4, r1
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	f000 f8fc 	bl	80074d4 <_read_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	bfab      	itete	ge
 80072e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072e2:	89a3      	ldrhlt	r3, [r4, #12]
 80072e4:	181b      	addge	r3, r3, r0
 80072e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ea:	bfac      	ite	ge
 80072ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ee:	81a3      	strhlt	r3, [r4, #12]
 80072f0:	bd10      	pop	{r4, pc}

080072f2 <__swrite>:
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	461f      	mov	r7, r3
 80072f8:	898b      	ldrh	r3, [r1, #12]
 80072fa:	05db      	lsls	r3, r3, #23
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	4616      	mov	r6, r2
 8007302:	d505      	bpl.n	8007310 <__swrite+0x1e>
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	2302      	movs	r3, #2
 800730a:	2200      	movs	r2, #0
 800730c:	f000 f8d0 	bl	80074b0 <_lseek_r>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	4632      	mov	r2, r6
 800731e:	463b      	mov	r3, r7
 8007320:	4628      	mov	r0, r5
 8007322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	f000 b8e7 	b.w	80074f8 <_write_r>

0800732a <__sseek>:
 800732a:	b510      	push	{r4, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007332:	f000 f8bd 	bl	80074b0 <_lseek_r>
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	bf15      	itete	ne
 800733c:	6560      	strne	r0, [r4, #84]	; 0x54
 800733e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007346:	81a3      	strheq	r3, [r4, #12]
 8007348:	bf18      	it	ne
 800734a:	81a3      	strhne	r3, [r4, #12]
 800734c:	bd10      	pop	{r4, pc}

0800734e <__sclose>:
 800734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007352:	f000 b89d 	b.w	8007490 <_close_r>

08007356 <__swbuf_r>:
 8007356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007358:	460e      	mov	r6, r1
 800735a:	4614      	mov	r4, r2
 800735c:	4605      	mov	r5, r0
 800735e:	b118      	cbz	r0, 8007368 <__swbuf_r+0x12>
 8007360:	6a03      	ldr	r3, [r0, #32]
 8007362:	b90b      	cbnz	r3, 8007368 <__swbuf_r+0x12>
 8007364:	f7ff ff22 	bl	80071ac <__sinit>
 8007368:	69a3      	ldr	r3, [r4, #24]
 800736a:	60a3      	str	r3, [r4, #8]
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	071a      	lsls	r2, r3, #28
 8007370:	d525      	bpl.n	80073be <__swbuf_r+0x68>
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	b31b      	cbz	r3, 80073be <__swbuf_r+0x68>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	6922      	ldr	r2, [r4, #16]
 800737a:	1a98      	subs	r0, r3, r2
 800737c:	6963      	ldr	r3, [r4, #20]
 800737e:	b2f6      	uxtb	r6, r6
 8007380:	4283      	cmp	r3, r0
 8007382:	4637      	mov	r7, r6
 8007384:	dc04      	bgt.n	8007390 <__swbuf_r+0x3a>
 8007386:	4621      	mov	r1, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 fa73 	bl	8007874 <_fflush_r>
 800738e:	b9e0      	cbnz	r0, 80073ca <__swbuf_r+0x74>
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	3b01      	subs	r3, #1
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	701e      	strb	r6, [r3, #0]
 800739e:	6962      	ldr	r2, [r4, #20]
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d004      	beq.n	80073b0 <__swbuf_r+0x5a>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	07db      	lsls	r3, r3, #31
 80073aa:	d506      	bpl.n	80073ba <__swbuf_r+0x64>
 80073ac:	2e0a      	cmp	r6, #10
 80073ae:	d104      	bne.n	80073ba <__swbuf_r+0x64>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 fa5e 	bl	8007874 <_fflush_r>
 80073b8:	b938      	cbnz	r0, 80073ca <__swbuf_r+0x74>
 80073ba:	4638      	mov	r0, r7
 80073bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073be:	4621      	mov	r1, r4
 80073c0:	4628      	mov	r0, r5
 80073c2:	f000 f805 	bl	80073d0 <__swsetup_r>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d0d5      	beq.n	8007376 <__swbuf_r+0x20>
 80073ca:	f04f 37ff 	mov.w	r7, #4294967295
 80073ce:	e7f4      	b.n	80073ba <__swbuf_r+0x64>

080073d0 <__swsetup_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4b2a      	ldr	r3, [pc, #168]	; (800747c <__swsetup_r+0xac>)
 80073d4:	4605      	mov	r5, r0
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	460c      	mov	r4, r1
 80073da:	b118      	cbz	r0, 80073e4 <__swsetup_r+0x14>
 80073dc:	6a03      	ldr	r3, [r0, #32]
 80073de:	b90b      	cbnz	r3, 80073e4 <__swsetup_r+0x14>
 80073e0:	f7ff fee4 	bl	80071ac <__sinit>
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073ea:	0718      	lsls	r0, r3, #28
 80073ec:	d422      	bmi.n	8007434 <__swsetup_r+0x64>
 80073ee:	06d9      	lsls	r1, r3, #27
 80073f0:	d407      	bmi.n	8007402 <__swsetup_r+0x32>
 80073f2:	2309      	movs	r3, #9
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e034      	b.n	800746c <__swsetup_r+0x9c>
 8007402:	0758      	lsls	r0, r3, #29
 8007404:	d512      	bpl.n	800742c <__swsetup_r+0x5c>
 8007406:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007408:	b141      	cbz	r1, 800741c <__swsetup_r+0x4c>
 800740a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800740e:	4299      	cmp	r1, r3
 8007410:	d002      	beq.n	8007418 <__swsetup_r+0x48>
 8007412:	4628      	mov	r0, r5
 8007414:	f000 f8b0 	bl	8007578 <_free_r>
 8007418:	2300      	movs	r3, #0
 800741a:	6363      	str	r3, [r4, #52]	; 0x34
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	2300      	movs	r3, #0
 8007426:	6063      	str	r3, [r4, #4]
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	f043 0308 	orr.w	r3, r3, #8
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	b94b      	cbnz	r3, 800744c <__swsetup_r+0x7c>
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800743e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007442:	d003      	beq.n	800744c <__swsetup_r+0x7c>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f000 fa62 	bl	8007910 <__smakebuf_r>
 800744c:	89a0      	ldrh	r0, [r4, #12]
 800744e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007452:	f010 0301 	ands.w	r3, r0, #1
 8007456:	d00a      	beq.n	800746e <__swsetup_r+0x9e>
 8007458:	2300      	movs	r3, #0
 800745a:	60a3      	str	r3, [r4, #8]
 800745c:	6963      	ldr	r3, [r4, #20]
 800745e:	425b      	negs	r3, r3
 8007460:	61a3      	str	r3, [r4, #24]
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	b943      	cbnz	r3, 8007478 <__swsetup_r+0xa8>
 8007466:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800746a:	d1c4      	bne.n	80073f6 <__swsetup_r+0x26>
 800746c:	bd38      	pop	{r3, r4, r5, pc}
 800746e:	0781      	lsls	r1, r0, #30
 8007470:	bf58      	it	pl
 8007472:	6963      	ldrpl	r3, [r4, #20]
 8007474:	60a3      	str	r3, [r4, #8]
 8007476:	e7f4      	b.n	8007462 <__swsetup_r+0x92>
 8007478:	2000      	movs	r0, #0
 800747a:	e7f7      	b.n	800746c <__swsetup_r+0x9c>
 800747c:	20000154 	.word	0x20000154

08007480 <memset>:
 8007480:	4402      	add	r2, r0
 8007482:	4603      	mov	r3, r0
 8007484:	4293      	cmp	r3, r2
 8007486:	d100      	bne.n	800748a <memset+0xa>
 8007488:	4770      	bx	lr
 800748a:	f803 1b01 	strb.w	r1, [r3], #1
 800748e:	e7f9      	b.n	8007484 <memset+0x4>

08007490 <_close_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d06      	ldr	r5, [pc, #24]	; (80074ac <_close_r+0x1c>)
 8007494:	2300      	movs	r3, #0
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7f9 fa3b 	bl	8000916 <_close>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_close_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_close_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20001ec4 	.word	0x20001ec4

080074b0 <_lseek_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_lseek_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7f9 fa50 	bl	8000964 <_lseek>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_lseek_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_lseek_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20001ec4 	.word	0x20001ec4

080074d4 <_read_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d07      	ldr	r5, [pc, #28]	; (80074f4 <_read_r+0x20>)
 80074d8:	4604      	mov	r4, r0
 80074da:	4608      	mov	r0, r1
 80074dc:	4611      	mov	r1, r2
 80074de:	2200      	movs	r2, #0
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f7f9 f9fa 	bl	80008dc <_read>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_read_r+0x1e>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_read_r+0x1e>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20001ec4 	.word	0x20001ec4

080074f8 <_write_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	; (8007518 <_write_r+0x20>)
 80074fc:	4604      	mov	r4, r0
 80074fe:	4608      	mov	r0, r1
 8007500:	4611      	mov	r1, r2
 8007502:	2200      	movs	r2, #0
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7f9 f850 	bl	80005ac <_write>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_write_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_write_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	20001ec4 	.word	0x20001ec4

0800751c <__errno>:
 800751c:	4b01      	ldr	r3, [pc, #4]	; (8007524 <__errno+0x8>)
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000154 	.word	0x20000154

08007528 <__libc_init_array>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	4d0d      	ldr	r5, [pc, #52]	; (8007560 <__libc_init_array+0x38>)
 800752c:	4c0d      	ldr	r4, [pc, #52]	; (8007564 <__libc_init_array+0x3c>)
 800752e:	1b64      	subs	r4, r4, r5
 8007530:	10a4      	asrs	r4, r4, #2
 8007532:	2600      	movs	r6, #0
 8007534:	42a6      	cmp	r6, r4
 8007536:	d109      	bne.n	800754c <__libc_init_array+0x24>
 8007538:	4d0b      	ldr	r5, [pc, #44]	; (8007568 <__libc_init_array+0x40>)
 800753a:	4c0c      	ldr	r4, [pc, #48]	; (800756c <__libc_init_array+0x44>)
 800753c:	f000 fa56 	bl	80079ec <_init>
 8007540:	1b64      	subs	r4, r4, r5
 8007542:	10a4      	asrs	r4, r4, #2
 8007544:	2600      	movs	r6, #0
 8007546:	42a6      	cmp	r6, r4
 8007548:	d105      	bne.n	8007556 <__libc_init_array+0x2e>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007550:	4798      	blx	r3
 8007552:	3601      	adds	r6, #1
 8007554:	e7ee      	b.n	8007534 <__libc_init_array+0xc>
 8007556:	f855 3b04 	ldr.w	r3, [r5], #4
 800755a:	4798      	blx	r3
 800755c:	3601      	adds	r6, #1
 800755e:	e7f2      	b.n	8007546 <__libc_init_array+0x1e>
 8007560:	08007a98 	.word	0x08007a98
 8007564:	08007a98 	.word	0x08007a98
 8007568:	08007a98 	.word	0x08007a98
 800756c:	08007a9c 	.word	0x08007a9c

08007570 <__retarget_lock_init_recursive>:
 8007570:	4770      	bx	lr

08007572 <__retarget_lock_acquire_recursive>:
 8007572:	4770      	bx	lr

08007574 <__retarget_lock_release_recursive>:
 8007574:	4770      	bx	lr
	...

08007578 <_free_r>:
 8007578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800757a:	2900      	cmp	r1, #0
 800757c:	d044      	beq.n	8007608 <_free_r+0x90>
 800757e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007582:	9001      	str	r0, [sp, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f1a1 0404 	sub.w	r4, r1, #4
 800758a:	bfb8      	it	lt
 800758c:	18e4      	addlt	r4, r4, r3
 800758e:	f000 f8df 	bl	8007750 <__malloc_lock>
 8007592:	4a1e      	ldr	r2, [pc, #120]	; (800760c <_free_r+0x94>)
 8007594:	9801      	ldr	r0, [sp, #4]
 8007596:	6813      	ldr	r3, [r2, #0]
 8007598:	b933      	cbnz	r3, 80075a8 <_free_r+0x30>
 800759a:	6063      	str	r3, [r4, #4]
 800759c:	6014      	str	r4, [r2, #0]
 800759e:	b003      	add	sp, #12
 80075a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075a4:	f000 b8da 	b.w	800775c <__malloc_unlock>
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	d908      	bls.n	80075be <_free_r+0x46>
 80075ac:	6825      	ldr	r5, [r4, #0]
 80075ae:	1961      	adds	r1, r4, r5
 80075b0:	428b      	cmp	r3, r1
 80075b2:	bf01      	itttt	eq
 80075b4:	6819      	ldreq	r1, [r3, #0]
 80075b6:	685b      	ldreq	r3, [r3, #4]
 80075b8:	1949      	addeq	r1, r1, r5
 80075ba:	6021      	streq	r1, [r4, #0]
 80075bc:	e7ed      	b.n	800759a <_free_r+0x22>
 80075be:	461a      	mov	r2, r3
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	b10b      	cbz	r3, 80075c8 <_free_r+0x50>
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	d9fa      	bls.n	80075be <_free_r+0x46>
 80075c8:	6811      	ldr	r1, [r2, #0]
 80075ca:	1855      	adds	r5, r2, r1
 80075cc:	42a5      	cmp	r5, r4
 80075ce:	d10b      	bne.n	80075e8 <_free_r+0x70>
 80075d0:	6824      	ldr	r4, [r4, #0]
 80075d2:	4421      	add	r1, r4
 80075d4:	1854      	adds	r4, r2, r1
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	6011      	str	r1, [r2, #0]
 80075da:	d1e0      	bne.n	800759e <_free_r+0x26>
 80075dc:	681c      	ldr	r4, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	6053      	str	r3, [r2, #4]
 80075e2:	440c      	add	r4, r1
 80075e4:	6014      	str	r4, [r2, #0]
 80075e6:	e7da      	b.n	800759e <_free_r+0x26>
 80075e8:	d902      	bls.n	80075f0 <_free_r+0x78>
 80075ea:	230c      	movs	r3, #12
 80075ec:	6003      	str	r3, [r0, #0]
 80075ee:	e7d6      	b.n	800759e <_free_r+0x26>
 80075f0:	6825      	ldr	r5, [r4, #0]
 80075f2:	1961      	adds	r1, r4, r5
 80075f4:	428b      	cmp	r3, r1
 80075f6:	bf04      	itt	eq
 80075f8:	6819      	ldreq	r1, [r3, #0]
 80075fa:	685b      	ldreq	r3, [r3, #4]
 80075fc:	6063      	str	r3, [r4, #4]
 80075fe:	bf04      	itt	eq
 8007600:	1949      	addeq	r1, r1, r5
 8007602:	6021      	streq	r1, [r4, #0]
 8007604:	6054      	str	r4, [r2, #4]
 8007606:	e7ca      	b.n	800759e <_free_r+0x26>
 8007608:	b003      	add	sp, #12
 800760a:	bd30      	pop	{r4, r5, pc}
 800760c:	20001ecc 	.word	0x20001ecc

08007610 <sbrk_aligned>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	4e0e      	ldr	r6, [pc, #56]	; (800764c <sbrk_aligned+0x3c>)
 8007614:	460c      	mov	r4, r1
 8007616:	6831      	ldr	r1, [r6, #0]
 8007618:	4605      	mov	r5, r0
 800761a:	b911      	cbnz	r1, 8007622 <sbrk_aligned+0x12>
 800761c:	f000 f9d6 	bl	80079cc <_sbrk_r>
 8007620:	6030      	str	r0, [r6, #0]
 8007622:	4621      	mov	r1, r4
 8007624:	4628      	mov	r0, r5
 8007626:	f000 f9d1 	bl	80079cc <_sbrk_r>
 800762a:	1c43      	adds	r3, r0, #1
 800762c:	d00a      	beq.n	8007644 <sbrk_aligned+0x34>
 800762e:	1cc4      	adds	r4, r0, #3
 8007630:	f024 0403 	bic.w	r4, r4, #3
 8007634:	42a0      	cmp	r0, r4
 8007636:	d007      	beq.n	8007648 <sbrk_aligned+0x38>
 8007638:	1a21      	subs	r1, r4, r0
 800763a:	4628      	mov	r0, r5
 800763c:	f000 f9c6 	bl	80079cc <_sbrk_r>
 8007640:	3001      	adds	r0, #1
 8007642:	d101      	bne.n	8007648 <sbrk_aligned+0x38>
 8007644:	f04f 34ff 	mov.w	r4, #4294967295
 8007648:	4620      	mov	r0, r4
 800764a:	bd70      	pop	{r4, r5, r6, pc}
 800764c:	20001ed0 	.word	0x20001ed0

08007650 <_malloc_r>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	1ccd      	adds	r5, r1, #3
 8007656:	f025 0503 	bic.w	r5, r5, #3
 800765a:	3508      	adds	r5, #8
 800765c:	2d0c      	cmp	r5, #12
 800765e:	bf38      	it	cc
 8007660:	250c      	movcc	r5, #12
 8007662:	2d00      	cmp	r5, #0
 8007664:	4607      	mov	r7, r0
 8007666:	db01      	blt.n	800766c <_malloc_r+0x1c>
 8007668:	42a9      	cmp	r1, r5
 800766a:	d905      	bls.n	8007678 <_malloc_r+0x28>
 800766c:	230c      	movs	r3, #12
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	2600      	movs	r6, #0
 8007672:	4630      	mov	r0, r6
 8007674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007678:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800774c <_malloc_r+0xfc>
 800767c:	f000 f868 	bl	8007750 <__malloc_lock>
 8007680:	f8d8 3000 	ldr.w	r3, [r8]
 8007684:	461c      	mov	r4, r3
 8007686:	bb5c      	cbnz	r4, 80076e0 <_malloc_r+0x90>
 8007688:	4629      	mov	r1, r5
 800768a:	4638      	mov	r0, r7
 800768c:	f7ff ffc0 	bl	8007610 <sbrk_aligned>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	4604      	mov	r4, r0
 8007694:	d155      	bne.n	8007742 <_malloc_r+0xf2>
 8007696:	f8d8 4000 	ldr.w	r4, [r8]
 800769a:	4626      	mov	r6, r4
 800769c:	2e00      	cmp	r6, #0
 800769e:	d145      	bne.n	800772c <_malloc_r+0xdc>
 80076a0:	2c00      	cmp	r4, #0
 80076a2:	d048      	beq.n	8007736 <_malloc_r+0xe6>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	4631      	mov	r1, r6
 80076a8:	4638      	mov	r0, r7
 80076aa:	eb04 0903 	add.w	r9, r4, r3
 80076ae:	f000 f98d 	bl	80079cc <_sbrk_r>
 80076b2:	4581      	cmp	r9, r0
 80076b4:	d13f      	bne.n	8007736 <_malloc_r+0xe6>
 80076b6:	6821      	ldr	r1, [r4, #0]
 80076b8:	1a6d      	subs	r5, r5, r1
 80076ba:	4629      	mov	r1, r5
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff ffa7 	bl	8007610 <sbrk_aligned>
 80076c2:	3001      	adds	r0, #1
 80076c4:	d037      	beq.n	8007736 <_malloc_r+0xe6>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	442b      	add	r3, r5
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	f8d8 3000 	ldr.w	r3, [r8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d038      	beq.n	8007746 <_malloc_r+0xf6>
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	42a2      	cmp	r2, r4
 80076d8:	d12b      	bne.n	8007732 <_malloc_r+0xe2>
 80076da:	2200      	movs	r2, #0
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	e00f      	b.n	8007700 <_malloc_r+0xb0>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	1b52      	subs	r2, r2, r5
 80076e4:	d41f      	bmi.n	8007726 <_malloc_r+0xd6>
 80076e6:	2a0b      	cmp	r2, #11
 80076e8:	d917      	bls.n	800771a <_malloc_r+0xca>
 80076ea:	1961      	adds	r1, r4, r5
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	6025      	str	r5, [r4, #0]
 80076f0:	bf18      	it	ne
 80076f2:	6059      	strne	r1, [r3, #4]
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	bf08      	it	eq
 80076f8:	f8c8 1000 	streq.w	r1, [r8]
 80076fc:	5162      	str	r2, [r4, r5]
 80076fe:	604b      	str	r3, [r1, #4]
 8007700:	4638      	mov	r0, r7
 8007702:	f104 060b 	add.w	r6, r4, #11
 8007706:	f000 f829 	bl	800775c <__malloc_unlock>
 800770a:	f026 0607 	bic.w	r6, r6, #7
 800770e:	1d23      	adds	r3, r4, #4
 8007710:	1af2      	subs	r2, r6, r3
 8007712:	d0ae      	beq.n	8007672 <_malloc_r+0x22>
 8007714:	1b9b      	subs	r3, r3, r6
 8007716:	50a3      	str	r3, [r4, r2]
 8007718:	e7ab      	b.n	8007672 <_malloc_r+0x22>
 800771a:	42a3      	cmp	r3, r4
 800771c:	6862      	ldr	r2, [r4, #4]
 800771e:	d1dd      	bne.n	80076dc <_malloc_r+0x8c>
 8007720:	f8c8 2000 	str.w	r2, [r8]
 8007724:	e7ec      	b.n	8007700 <_malloc_r+0xb0>
 8007726:	4623      	mov	r3, r4
 8007728:	6864      	ldr	r4, [r4, #4]
 800772a:	e7ac      	b.n	8007686 <_malloc_r+0x36>
 800772c:	4634      	mov	r4, r6
 800772e:	6876      	ldr	r6, [r6, #4]
 8007730:	e7b4      	b.n	800769c <_malloc_r+0x4c>
 8007732:	4613      	mov	r3, r2
 8007734:	e7cc      	b.n	80076d0 <_malloc_r+0x80>
 8007736:	230c      	movs	r3, #12
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	4638      	mov	r0, r7
 800773c:	f000 f80e 	bl	800775c <__malloc_unlock>
 8007740:	e797      	b.n	8007672 <_malloc_r+0x22>
 8007742:	6025      	str	r5, [r4, #0]
 8007744:	e7dc      	b.n	8007700 <_malloc_r+0xb0>
 8007746:	605b      	str	r3, [r3, #4]
 8007748:	deff      	udf	#255	; 0xff
 800774a:	bf00      	nop
 800774c:	20001ecc 	.word	0x20001ecc

08007750 <__malloc_lock>:
 8007750:	4801      	ldr	r0, [pc, #4]	; (8007758 <__malloc_lock+0x8>)
 8007752:	f7ff bf0e 	b.w	8007572 <__retarget_lock_acquire_recursive>
 8007756:	bf00      	nop
 8007758:	20001ec8 	.word	0x20001ec8

0800775c <__malloc_unlock>:
 800775c:	4801      	ldr	r0, [pc, #4]	; (8007764 <__malloc_unlock+0x8>)
 800775e:	f7ff bf09 	b.w	8007574 <__retarget_lock_release_recursive>
 8007762:	bf00      	nop
 8007764:	20001ec8 	.word	0x20001ec8

08007768 <__sflush_r>:
 8007768:	898a      	ldrh	r2, [r1, #12]
 800776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776e:	4605      	mov	r5, r0
 8007770:	0710      	lsls	r0, r2, #28
 8007772:	460c      	mov	r4, r1
 8007774:	d458      	bmi.n	8007828 <__sflush_r+0xc0>
 8007776:	684b      	ldr	r3, [r1, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	dc05      	bgt.n	8007788 <__sflush_r+0x20>
 800777c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	dc02      	bgt.n	8007788 <__sflush_r+0x20>
 8007782:	2000      	movs	r0, #0
 8007784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800778a:	2e00      	cmp	r6, #0
 800778c:	d0f9      	beq.n	8007782 <__sflush_r+0x1a>
 800778e:	2300      	movs	r3, #0
 8007790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007794:	682f      	ldr	r7, [r5, #0]
 8007796:	6a21      	ldr	r1, [r4, #32]
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	d032      	beq.n	8007802 <__sflush_r+0x9a>
 800779c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	075a      	lsls	r2, r3, #29
 80077a2:	d505      	bpl.n	80077b0 <__sflush_r+0x48>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	1ac0      	subs	r0, r0, r3
 80077a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077aa:	b10b      	cbz	r3, 80077b0 <__sflush_r+0x48>
 80077ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077ae:	1ac0      	subs	r0, r0, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	4602      	mov	r2, r0
 80077b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077b6:	6a21      	ldr	r1, [r4, #32]
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b0      	blx	r6
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	d106      	bne.n	80077d0 <__sflush_r+0x68>
 80077c2:	6829      	ldr	r1, [r5, #0]
 80077c4:	291d      	cmp	r1, #29
 80077c6:	d82b      	bhi.n	8007820 <__sflush_r+0xb8>
 80077c8:	4a29      	ldr	r2, [pc, #164]	; (8007870 <__sflush_r+0x108>)
 80077ca:	410a      	asrs	r2, r1
 80077cc:	07d6      	lsls	r6, r2, #31
 80077ce:	d427      	bmi.n	8007820 <__sflush_r+0xb8>
 80077d0:	2200      	movs	r2, #0
 80077d2:	6062      	str	r2, [r4, #4]
 80077d4:	04d9      	lsls	r1, r3, #19
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	6022      	str	r2, [r4, #0]
 80077da:	d504      	bpl.n	80077e6 <__sflush_r+0x7e>
 80077dc:	1c42      	adds	r2, r0, #1
 80077de:	d101      	bne.n	80077e4 <__sflush_r+0x7c>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	b903      	cbnz	r3, 80077e6 <__sflush_r+0x7e>
 80077e4:	6560      	str	r0, [r4, #84]	; 0x54
 80077e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077e8:	602f      	str	r7, [r5, #0]
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d0c9      	beq.n	8007782 <__sflush_r+0x1a>
 80077ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f2:	4299      	cmp	r1, r3
 80077f4:	d002      	beq.n	80077fc <__sflush_r+0x94>
 80077f6:	4628      	mov	r0, r5
 80077f8:	f7ff febe 	bl	8007578 <_free_r>
 80077fc:	2000      	movs	r0, #0
 80077fe:	6360      	str	r0, [r4, #52]	; 0x34
 8007800:	e7c0      	b.n	8007784 <__sflush_r+0x1c>
 8007802:	2301      	movs	r3, #1
 8007804:	4628      	mov	r0, r5
 8007806:	47b0      	blx	r6
 8007808:	1c41      	adds	r1, r0, #1
 800780a:	d1c8      	bne.n	800779e <__sflush_r+0x36>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0c5      	beq.n	800779e <__sflush_r+0x36>
 8007812:	2b1d      	cmp	r3, #29
 8007814:	d001      	beq.n	800781a <__sflush_r+0xb2>
 8007816:	2b16      	cmp	r3, #22
 8007818:	d101      	bne.n	800781e <__sflush_r+0xb6>
 800781a:	602f      	str	r7, [r5, #0]
 800781c:	e7b1      	b.n	8007782 <__sflush_r+0x1a>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	e7ad      	b.n	8007784 <__sflush_r+0x1c>
 8007828:	690f      	ldr	r7, [r1, #16]
 800782a:	2f00      	cmp	r7, #0
 800782c:	d0a9      	beq.n	8007782 <__sflush_r+0x1a>
 800782e:	0793      	lsls	r3, r2, #30
 8007830:	680e      	ldr	r6, [r1, #0]
 8007832:	bf08      	it	eq
 8007834:	694b      	ldreq	r3, [r1, #20]
 8007836:	600f      	str	r7, [r1, #0]
 8007838:	bf18      	it	ne
 800783a:	2300      	movne	r3, #0
 800783c:	eba6 0807 	sub.w	r8, r6, r7
 8007840:	608b      	str	r3, [r1, #8]
 8007842:	f1b8 0f00 	cmp.w	r8, #0
 8007846:	dd9c      	ble.n	8007782 <__sflush_r+0x1a>
 8007848:	6a21      	ldr	r1, [r4, #32]
 800784a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800784c:	4643      	mov	r3, r8
 800784e:	463a      	mov	r2, r7
 8007850:	4628      	mov	r0, r5
 8007852:	47b0      	blx	r6
 8007854:	2800      	cmp	r0, #0
 8007856:	dc06      	bgt.n	8007866 <__sflush_r+0xfe>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e78e      	b.n	8007784 <__sflush_r+0x1c>
 8007866:	4407      	add	r7, r0
 8007868:	eba8 0800 	sub.w	r8, r8, r0
 800786c:	e7e9      	b.n	8007842 <__sflush_r+0xda>
 800786e:	bf00      	nop
 8007870:	dfbffffe 	.word	0xdfbffffe

08007874 <_fflush_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b913      	cbnz	r3, 8007884 <_fflush_r+0x10>
 800787e:	2500      	movs	r5, #0
 8007880:	4628      	mov	r0, r5
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	b118      	cbz	r0, 800788e <_fflush_r+0x1a>
 8007886:	6a03      	ldr	r3, [r0, #32]
 8007888:	b90b      	cbnz	r3, 800788e <_fflush_r+0x1a>
 800788a:	f7ff fc8f 	bl	80071ac <__sinit>
 800788e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0f3      	beq.n	800787e <_fflush_r+0xa>
 8007896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007898:	07d0      	lsls	r0, r2, #31
 800789a:	d404      	bmi.n	80078a6 <_fflush_r+0x32>
 800789c:	0599      	lsls	r1, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_fflush_r+0x32>
 80078a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078a2:	f7ff fe66 	bl	8007572 <__retarget_lock_acquire_recursive>
 80078a6:	4628      	mov	r0, r5
 80078a8:	4621      	mov	r1, r4
 80078aa:	f7ff ff5d 	bl	8007768 <__sflush_r>
 80078ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078b0:	07da      	lsls	r2, r3, #31
 80078b2:	4605      	mov	r5, r0
 80078b4:	d4e4      	bmi.n	8007880 <_fflush_r+0xc>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	059b      	lsls	r3, r3, #22
 80078ba:	d4e1      	bmi.n	8007880 <_fflush_r+0xc>
 80078bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078be:	f7ff fe59 	bl	8007574 <__retarget_lock_release_recursive>
 80078c2:	e7dd      	b.n	8007880 <_fflush_r+0xc>

080078c4 <__swhatbuf_r>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	460c      	mov	r4, r1
 80078c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078cc:	2900      	cmp	r1, #0
 80078ce:	b096      	sub	sp, #88	; 0x58
 80078d0:	4615      	mov	r5, r2
 80078d2:	461e      	mov	r6, r3
 80078d4:	da0d      	bge.n	80078f2 <__swhatbuf_r+0x2e>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078dc:	f04f 0100 	mov.w	r1, #0
 80078e0:	bf0c      	ite	eq
 80078e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078e6:	2340      	movne	r3, #64	; 0x40
 80078e8:	2000      	movs	r0, #0
 80078ea:	6031      	str	r1, [r6, #0]
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	b016      	add	sp, #88	; 0x58
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	466a      	mov	r2, sp
 80078f4:	f000 f848 	bl	8007988 <_fstat_r>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	dbec      	blt.n	80078d6 <__swhatbuf_r+0x12>
 80078fc:	9901      	ldr	r1, [sp, #4]
 80078fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007902:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007906:	4259      	negs	r1, r3
 8007908:	4159      	adcs	r1, r3
 800790a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800790e:	e7eb      	b.n	80078e8 <__swhatbuf_r+0x24>

08007910 <__smakebuf_r>:
 8007910:	898b      	ldrh	r3, [r1, #12]
 8007912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007914:	079d      	lsls	r5, r3, #30
 8007916:	4606      	mov	r6, r0
 8007918:	460c      	mov	r4, r1
 800791a:	d507      	bpl.n	800792c <__smakebuf_r+0x1c>
 800791c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	6123      	str	r3, [r4, #16]
 8007924:	2301      	movs	r3, #1
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	b002      	add	sp, #8
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	ab01      	add	r3, sp, #4
 800792e:	466a      	mov	r2, sp
 8007930:	f7ff ffc8 	bl	80078c4 <__swhatbuf_r>
 8007934:	9900      	ldr	r1, [sp, #0]
 8007936:	4605      	mov	r5, r0
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff fe89 	bl	8007650 <_malloc_r>
 800793e:	b948      	cbnz	r0, 8007954 <__smakebuf_r+0x44>
 8007940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007944:	059a      	lsls	r2, r3, #22
 8007946:	d4ef      	bmi.n	8007928 <__smakebuf_r+0x18>
 8007948:	f023 0303 	bic.w	r3, r3, #3
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	e7e3      	b.n	800791c <__smakebuf_r+0xc>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	6020      	str	r0, [r4, #0]
 8007958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	9b00      	ldr	r3, [sp, #0]
 8007960:	6163      	str	r3, [r4, #20]
 8007962:	9b01      	ldr	r3, [sp, #4]
 8007964:	6120      	str	r0, [r4, #16]
 8007966:	b15b      	cbz	r3, 8007980 <__smakebuf_r+0x70>
 8007968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796c:	4630      	mov	r0, r6
 800796e:	f000 f81d 	bl	80079ac <_isatty_r>
 8007972:	b128      	cbz	r0, 8007980 <__smakebuf_r+0x70>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	431d      	orrs	r5, r3
 8007984:	81a5      	strh	r5, [r4, #12]
 8007986:	e7cf      	b.n	8007928 <__smakebuf_r+0x18>

08007988 <_fstat_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d07      	ldr	r5, [pc, #28]	; (80079a8 <_fstat_r+0x20>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	4611      	mov	r1, r2
 8007994:	602b      	str	r3, [r5, #0]
 8007996:	f7f8 ffca 	bl	800092e <_fstat>
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	d102      	bne.n	80079a4 <_fstat_r+0x1c>
 800799e:	682b      	ldr	r3, [r5, #0]
 80079a0:	b103      	cbz	r3, 80079a4 <_fstat_r+0x1c>
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	bd38      	pop	{r3, r4, r5, pc}
 80079a6:	bf00      	nop
 80079a8:	20001ec4 	.word	0x20001ec4

080079ac <_isatty_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d06      	ldr	r5, [pc, #24]	; (80079c8 <_isatty_r+0x1c>)
 80079b0:	2300      	movs	r3, #0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4608      	mov	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7f8 ffc9 	bl	800094e <_isatty>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_isatty_r+0x1a>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_isatty_r+0x1a>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20001ec4 	.word	0x20001ec4

080079cc <_sbrk_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d06      	ldr	r5, [pc, #24]	; (80079e8 <_sbrk_r+0x1c>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	602b      	str	r3, [r5, #0]
 80079d8:	f7f8 ffd2 	bl	8000980 <_sbrk>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_sbrk_r+0x1a>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_sbrk_r+0x1a>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	20001ec4 	.word	0x20001ec4

080079ec <_init>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr

080079f8 <_fini>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr
